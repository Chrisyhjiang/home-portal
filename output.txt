
File: ./src/App.tsx

import React, { useState, useEffect } from 'react';
import Desktop from "./features/Desktop/components/Desktop";
import Loading from './features/Loading/Loading';

const App: React.FC = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [fadeOut, setFadeOut] = useState(false);
  const [fadeIn, setFadeIn] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setFadeOut(true);
      setTimeout(() => {
        setIsLoading(false);
        setFadeIn(true);
      }, 500);
    }, 4500);

    return () => clearTimeout(timer);
  }, []);

  return (
    <>
      {isLoading && (
        <div className={`fixed inset-0 ${fadeOut ? 'opacity-0 transition-opacity duration-1000' : ''}`}>
          <Loading />
        </div>
      )}
      
      <div className={`relative h-screen w-screen ${fadeIn ? 'opacity-100 transition-opacity duration-1000' : 'opacity-0'}`}>
        <video
          autoPlay
          loop
          muted
          playsInline
          className="absolute inset-0 w-full h-full object-cover -z-10"
        >
          <source src="/background.mp4" type="video/mp4" />
          Your browser does not support the video tag.
        </video>

        <div className="relative">
          <Desktop />
        </div>
      </div>
    </>
  );
};

export default App;

File: ./src/main.tsx

import { createRoot } from "react-dom/client";
import "./styles/index.css";
import App from "./App.tsx";

createRoot(document.getElementById("root")!).render(
  // 🚨 Remove StrictMode to avoid warnings
  <App />
);

File: ./src/features/Loading/Loading.tsx

import React from 'react';
import './styles/Loading.css'; // Import the CSS file for styling

const Loading: React.FC = () => {
    return (
        <div className="loading-container">
            <div id='loader'>
                <div id='title' className='flex'>
                    <p className='loading-text'>LOADING</p>
                    <div className='therefore'>∴</div>
                    <p className="loading-number">%</p>
                </div>
                <div id='loading-bar-border'>
                    <div className='loading-bar'></div>
                </div>
                <div id='warning'>
                    <p>
                        <div className='exclamation'>!</div>
                        CAUTION, Do not turn off.
                    </p>
                    <div id='line-cascates'></div>
                </div>
            </div>
        </div>
    );
};

export default Loading;

File: ./src/features/PDFViewer/components/PDFViewer.tsx

import React from "react";

interface PDFViewerProps {
  filePath?: string;
  onClose: () => void;
}

const PDFViewer: React.FC<PDFViewerProps> = ({ filePath, onClose }) => {
  if (!filePath || !filePath.endsWith(".pdf")) {
    return (
      <div className="p-4 text-white bg-red-500">No valid PDF selected.</div>
    );
  }

  const correctedPath = filePath.startsWith("/docs/")
    ? filePath
    : `/docs/${filePath.replace(/^\/?public\//, "")}`;

  return (
    <div
      style={{
        width: "100%",
        height: "100%",
        overflow: "hidden",
        backgroundColor: "#2e2e2e",
      }}
    >
      <iframe
  src={`${correctedPath}#toolbar=1&navpanes=0&scrollbar=1`}
  style={{
    width: "100%",
    height: "100%",
    border: "none",
  }}
  title="PDF viewer"
/>

    </div>
  );
};

export default PDFViewer;

File: ./src/features/Terminal/components/Terminal.tsx

import { useState } from "react";
import { useAppStore } from "@hooks/useAppStore";

export default function Terminal() {
  const [output, setOutput] = useState<string[]>(["Welcome to Terminal"]);
  const [input, setInput] = useState("");
  const { openApp } = useAppStore();

  const commands = {
    ls: () => "Resume.pdf  Project1  Project2",
    clear: () => {
      setOutput([]);
      return "";
    },
    help: () =>
      "Available commands:\n- ls (List files)\n- show <file> (View PDF files)\n- clear (Clear terminal)\n- help (Show this help message)",
  };

  const handleCommand = (event: React.FormEvent) => {
    event.preventDefault();
    let newOutput = [...output, `$ ${input}`];

    const args = input.split(" ");
    const command = args[0];

    if (command === "show" && args[1]?.endsWith(".pdf")) {
      const filePath = `/docs/${args[1]}`;
      console.log("Opening PDF:", filePath);
      newOutput.push(`Opening ${args[1]}...`);
      openApp("Resume", { filePath });
    } else if (commands[command]) {
      newOutput.push(commands[command]());
    } else {
      newOutput.push("Command not found. Type 'help' for a list of commands.");
    }

    setOutput(newOutput);
    setInput("");
  };

  return (
    <div className="p-4 bg-black text-green-400 font-mono w-full h-full overflow-auto">
      {output.map((line, index) => (
        <div key={index}>{line}</div>
      ))}
      <form onSubmit={handleCommand} className="flex">
        <span className="mr-2">$</span>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="bg-black border-none outline-none text-green-400 flex-grow"
          autoFocus
        />
      </form>
    </div>
  );
}

File: ./src/features/Desktop/components/Desktop.tsx

import { useAppStore } from "@hooks/useAppStore";
import Topbar from "@features/Topbar/components/Topbar";
import Dock from "@features/Dock/components/Dock";
import Finder from "@features/Finder/components/Finder";
import Terminal from "@features/Terminal/components/Terminal";
import Window from "@features/Window/components/Window";
import PDFViewer from "@features/PDFViewer/components/PDFViewer";
import { useRef, useEffect } from "react";
import { apps } from "@shared/constants";
import React from "react";
import { motion, useMotionValue, animate } from "framer-motion";
import { PanInfo } from "framer-motion";
import AppIcon from "@shared/components/AppIcon/AppIcon";
import { Rnd } from "react-rnd";
import { useWindowOpener } from "@hooks/useWindowOpener";
import { useWindowManager } from "@hooks/useWindowManager";

interface DesktopIconProps {
  app: {
    name: string;
    icon: string;
    position?: { x: number; y: number };
  };
  onOpen: () => void;
  onDragEnd: (
    event: MouseEvent | TouchEvent | PointerEvent,
    info: PanInfo
  ) => void;
}

const DesktopIcon: React.FC<DesktopIconProps> = ({
  app,
  onOpen,
  onDragEnd,
}) => {
  const { desktopIcons, updateIconPosition } = useAppStore();
  const iconState = desktopIcons.find((icon) => icon.app === app.name);

  const handleDragStop = (e: any, data: { x: number; y: number }) => {
    const newPosition = { x: data.x, y: data.y };
    updateIconPosition(app.name, newPosition);
    onDragEnd(e, { point: newPosition });
  };

  return (
    <Rnd
      position={{
        x: iconState?.position.x ?? 20,
        y: iconState?.position.y ?? 20,
      }}
      size={{ width: 100, height: 100 }}
      onDragStop={handleDragStop}
      enableResizing={false}
      bounds="parent"
    >
      <div
        className="desktop-icon flex flex-col items-center gap-2 p-2 rounded hover:bg-white/10 group cursor-pointer"
        onClick={(e) => {
          e.stopPropagation();
          console.log("Icon clicked:", app.name);
          onOpen();
        }}
      >
        <div className="w-20 h-20 flex items-center justify-center rounded-full bg-gray-800 shadow-md border border-gray-300 overflow-hidden">
          <AppIcon
            icon={app.icon}
            name={app.name}
            className="w-16 h-16 object-cover rounded-full"
          />
        </div>
        <span
          className="text-white text-xs px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity"
          style={{
            textShadow: "0 1px 3px rgba(0, 0, 0, 0.8)",
            backgroundColor: "rgba(0, 0, 0, 0.6)",
          }}
        >
          {app.name}
        </span>
      </div>
    </Rnd>
  );
};

export default function Desktop() {
  const {
    openApps,
    openApp,
    closeApp,
    minimizeApp,
    restoreApp,
    desktopIcons,
    updateIconPosition,
    initializeDesktopIcons,
  } = useAppStore();

  const dragRefs = useRef<Record<string, React.RefObject<HTMLDivElement>>>({});
  const { openOrRestoreWindow } = useWindowOpener();
  const { windowStack } = useWindowManager();

  // Initialize desktop icons if empty
  useEffect(() => {
    if (desktopIcons.length === 0) {
      initializeDesktopIcons();
    }
  }, [desktopIcons.length, initializeDesktopIcons]);

  // ✅ Ensure refs exist for all openApps (without reinitializing on every render)
  useEffect(() => {
    openApps.forEach(({ appName }) => {
      if (!dragRefs.current[appName]) {
        dragRefs.current[appName] = { current: null };
      }
    });
  }, [openApps]);

  const handleMinimize = (appName: string) => {
    minimizeApp(appName);
  };

  const handleDockIconClick = (appName: string) => {
    const app = openApps.find((a) => a.appName === appName);

    if (app) {
      if (app.minimized) {
        // If app is minimized, restore it
        console.log(`[${appName}] Restoring minimized app`);
        restoreApp(appName);
      }
      // If app is already open and not minimized, do nothing
    } else {
      // If app isn't open at all, open it
      console.log(`[${appName}] Opening new app`);
      const appConfig = apps.find((a) => a.name === appName);
      if (appName === "Resume" && appConfig?.defaultFile) {
        openApp(appName, { filePath: appConfig.defaultFile });
      } else {
        openApp(appName);
      }
    }
  };

  // Update the desktop icon click handler
  const handleDesktopIconClick = (app: { name: string; icon: string }) => {
    console.log("Desktop icon clicked:", app.name);
    openOrRestoreWindow(app.name);
  };

  const handleGitHubClick = () => {
    window.open(
      "https://github.com/Chrisyhjiang",
      "_blank",
      "noopener,noreferrer"
    );
  };

  return (
    <div
      className="h-screen w-screen relative flex flex-col overflow-hidden pt-12 pb-20"
      onClick={(e) => console.log("Desktop clicked")}
    >
      <Topbar />

      {/* Desktop Icons Layer */}
      <div
        className="absolute inset-0 pt-12 z-10"
        onClick={(e) => console.log("Icons container clicked")}
      >
        <div
          className="relative w-full h-full"
          onClick={(e) => console.log("Inner icons container clicked")}
        >
          {apps.map((app) => (
            <DesktopIcon
              key={app.name}
              app={app}
              onOpen={() => openOrRestoreWindow(app.name)}
              onDragEnd={(event, info) =>
                updateIconPosition(app.name, {
                  x: info.point.x,
                  y: info.point.y,
                })
              }
            />
          ))}
          {/* GitHub Icon */}
        </div>
      </div>

      {/* Windows Layer */}
      {openApps.length > 0 && (
        <div className="relative z-30">
          {openApps.map(({ appName, filePath, minimized, startPosition }) => {
            const initialPosition = startPosition || {
              x: window.innerWidth / 2 - 300,
              y: window.innerHeight / 2 - 200,
            };

            // Calculate z-index based on window stack position
            const zIndex = windowStack.indexOf(appName);
            const baseZIndex = 30;
            const calculatedZIndex =
              zIndex === -1 ? baseZIndex : baseZIndex + zIndex;

            return (
              <div
                key={appName}
                style={{
                  position: "absolute",
                  zIndex: calculatedZIndex,
                  display: minimized ? "none" : "block",
                }}
              >
                <Window
                  title={appName}
                  isVisible={true}
                  onClose={() => closeApp(appName)}
                  onMinimize={() => handleMinimize(appName)}
                  startPosition={initialPosition}
                  windowId={appName}
                >
                  {appName === "Finder" && <Finder />}
                  {appName === "Terminal" && <Terminal />}
                  {appName === "Resume" && (
                    <PDFViewer
                      filePath={filePath}
                      onClose={() => closeApp(appName)}
                    />
                  )}
                </Window>
              </div>
            );
          })}
        </div>
      )}

      {/* Dock - Topmost layer */}
      <div className="z-40">
        <Dock openApp={handleDockIconClick} />
      </div>
    </div>
  );
}

File: ./src/features/Window/components/Window.tsx

import React, { useState, useEffect } from "react";
import { Rnd } from "react-rnd";
import { motion, animate, AnimatePresence } from "framer-motion";
import { useAppStore } from "@hooks/useAppStore";
import "../styles/Window.css";
import { useWindowManager } from "../../../hooks/useWindowManager";

interface WindowProps {
  title: string;
  isVisible: boolean;
  onClose: () => void;
  onMinimize: () => void;
  isMaximizedAlready?: boolean;
  children: React.ReactNode;
  startPosition?: { x: number; y: number };
  windowId: string;
}

const Window: React.FC<WindowProps> = ({
  title,
  isVisible,
  onClose,
  onMinimize,
  isMaximizedAlready = false,
  children,
  startPosition = {
    x: (window.innerWidth - 600) / 2,
    y: (window.innerHeight - 400) / 2,
  },
  windowId,
}) => {
  console.log(
    "Window component initialized with windowId:",
    windowId,
    "and title:",
    title
  );

  const [size, setSize] = useState(() => {
    if (title === "Resume") {
      return {
        width: Math.min(window.innerWidth * 0.6, 900),
        height: Math.min(window.innerHeight * 0.6, 800),
      };
    }
    return { width: 600, height: 400 };
  });
  const [position, setPosition] = useState(startPosition);
  const [isMaximized, setIsMaximized] = useState(isMaximizedAlready);
  const { openApps, setWindowPosition } = useAppStore();
  const windowClassName = `window-rnd-${title
    .toLowerCase()
    .replace(/\s+/g, "-")}`;
  const [isAnimating, setIsAnimating] = useState(false);
  const [preMaximizedState, setPreMaximizedState] = useState<{
    position: { x: number; y: number };
    size: { width: number; height: number };
  } | null>(null);
  const [isClosing, setIsClosing] = useState(false);
  const { bringToFront, windowStack, registerWindow } = useWindowManager();

  useEffect(() => {
    if (title === "Resume") {
      const width = isMaximized
        ? Math.min(window.innerWidth * 0.8, 1200)
        : Math.min(window.innerWidth * 0.6, 900);

      const height = isMaximized
        ? Math.min(window.innerHeight * 0.8, 1000)
        : Math.min(window.innerHeight * 0.6, 800);

      setSize({ width, height });
      setPosition({
        x: (window.innerWidth - width) / 2,
        y: (window.innerHeight - height) / 2,
      });
    }
  }, [isMaximized, title]);

  useEffect(() => {
    if (isMaximized) {
      const lastWindowState = {
        position,
        size,
      };

      // Calculate 75% of screen dimensions
      const maxWidth = window.innerWidth * 0.75;
      const maxHeight = window.innerHeight * 0.75;

      // Calculate position to center the window
      const centerX = (window.innerWidth - maxWidth) / 2;
      const centerY = (window.innerHeight - maxHeight) / 2;

      setSize({ width: maxWidth, height: maxHeight });
      setPosition({ x: centerX, y: centerY });

      setPreMaximizedState(lastWindowState);
    } else if (preMaximizedState) {
      setSize(preMaximizedState.size);
      setPosition(preMaximizedState.position);
    }
  }, [isMaximized]);

  useEffect(() => {
    console.log("Window registration effect - windowId:", windowId);
    if (windowId) {
      registerWindow(windowId);
    } else {
      console.warn(
        "Attempting to register window but windowId is undefined for title:",
        title
      );
    }
  }, [windowId, registerWindow, title]);

  const handleMaximize = () => {
    if (isMaximized) {
      // When un-maximizing, restore to previous size and position
      if (preMaximizedState) {
        setSize(preMaximizedState.size);
        setPosition(preMaximizedState.position);
      }
    } else {
      // When maximizing, save current state and set new size
      setPreMaximizedState({
        position,
        size,
      });
      const width = window.innerWidth * 0.8;
      const height = window.innerHeight * 0.8;
      setSize({ width, height });
      setPosition({
        x: (window.innerWidth - width) / 2,
        y: (window.innerHeight - height) / 2,
      });
    }
    setIsMaximized(!isMaximized);
  };

  const handleDrag = (e, d) => {
    const { innerWidth, innerHeight } = window;
    const threshold = 20;

    if (d.x < threshold) {
      // Snap to left half
      setSize({ width: innerWidth / 2, height: innerHeight });
      setPosition({ x: 0, y: 0 });
    } else if (d.x > innerWidth - threshold) {
      // Snap to right half
      setSize({ width: innerWidth / 2, height: innerHeight });
      setPosition({ x: innerWidth / 2, y: 0 });
    }
  };

  const handleClose = () => {
    setIsClosing(true);
    // Wait for animation to complete before calling onClose
    setTimeout(() => onClose(), 200);
  };

  const handleClick = () => {
    console.log("Window clicked - windowId:", windowId, "title:", title);
    if (windowId) {
      bringToFront(windowId);
    } else {
      console.error("windowId is undefined for window title:", title);
    }
  };

  const zIndex = windowStack.indexOf(windowId);

  return (
    <AnimatePresence>
      {isVisible && !isClosing && (
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.95 }}
          transition={{ duration: 0.2 }}
          onClick={handleClick}
        >
          <Rnd
            size={size}
            position={position}
            onDragStop={(e, d) => {
              setPosition({ x: d.x, y: d.y });
            }}
            onResizeStop={(e, direction, ref, delta, position) => {
              setSize({
                width: ref.offsetWidth,
                height: ref.offsetHeight,
              });
              setPosition(position);
            }}
            minWidth={300}
            minHeight={200}
            dragHandleClassName="window-top-bar"
            disableDragging={false}
            enableResizing={true}
            className={`${windowClassName} ${windowId}`}
            style={{
              zIndex,
              transition: isAnimating ? "width 0.3s, height 0.3s" : "none",
            }}
          >
            <div
              className={`window-container ${isMaximized ? "maximized" : ""}`}
            >
              <div className="window-top-bar">
                <div className="window-controls">
                  <button onClick={onMinimize} className="minimize-button">
                    _
                  </button>
                  <button onClick={handleMaximize}>
                    {isMaximized ? "❐" : "[]"}
                  </button>
                  <button onClick={handleClose}>X</button>
                </div>
                <span className="window-title">{title}</span>
              </div>
              <div
                className="window-content"
                style={{ height: "calc(100% - 30px)" }}
              >
                {children}
              </div>
            </div>
          </Rnd>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default Window;

File: ./src/features/Finder/components/Finder.tsx

import { useAppStore } from "@hooks/useAppStore";
import "../styles/Finder.css"; // Ensure you have this file for styling

export default function Finder() {
  const { openApp } = useAppStore(); // ✅ Use store to open PDFViewer

  const files = [
    { name: "Resume.pdf", path: "/docs/Resume.pdf" }, // ✅ Ensure exact casing
    { name: "Project 1", path: "https://github.com/Chrisyhjiang/project1" },
    { name: "Project 2", path: "https://github.com/Chrisyhjiang/project2" },
  ];

  return (
    <div className="finder-container">
      <h2 className="finder-title">Finder</h2>
      <ul className="finder-list">
        {files.map((file) => (
          <li key={file.name} className="finder-item">
            {file.path.startsWith("http") ? (
              <a
                href={file.path}
                target="_blank"
                rel="noopener noreferrer"
                className="finder-link"
              >
                {file.name}
              </a>
            ) : (
              <button
                onClick={() => openApp("Resume", { filePath: file.path })}
                className="finder-button"
              >
                {file.name}
              </button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

File: ./src/features/Topbar/components/Topbar.tsx

import { useEffect, useState } from "react";
import WeatherDisplay from "./WeatherDisplay";

export default function Topbar() {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-10 bg-gray-900/80 text-white flex items-center justify-between px-4 z-50 shadow-md">
      <div className="flex items-center gap-4">
        <span className="text-lg"></span>
        <span className="text-sm">Finder</span>
      </div>
      <div className="flex items-center gap-4">
        <WeatherDisplay />
        <div className="text-sm">
          {time.toLocaleTimeString([], { 
            hour: "2-digit", 
            minute: "2-digit",
            second: "2-digit"
          })}
        </div>
      </div>
    </div>
  );
}

File: ./src/features/Topbar/components/WeatherDisplay.tsx

import React, { useState, useEffect } from 'react';

const WeatherDisplay: React.FC = () => {
  const [weather, setWeather] = useState<{ temp: number; icon: string; city: string } | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchWeatherByLocation = async (latitude: number, longitude: number) => {
      try {
        const response = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=59af8c71ad2dea30ab94fdb72a98ddab`
        );
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        if (data.main && data.weather && data.name) {
          setWeather({
            temp: Math.round(data.main.temp),
            icon: data.weather[0].icon,
            city: data.name
          });
        } else {
          console.error('Unexpected data format:', data);
        }
      } catch (error) {
        console.error('Error fetching weather:', error);
      } finally {
        setLoading(false);
      }
    };

    const getLocation = () => {
      if (!navigator.geolocation) {
        console.error('Geolocation is not supported by your browser');
        return;
      }

      navigator.geolocation.getCurrentPosition(
        (position) => {
          fetchWeatherByLocation(
            position.coords.latitude,
            position.coords.longitude
          );
        },
        (error) => {
          console.error('Error getting location:', error);
        }
      );
    };

    getLocation();
    const interval = setInterval(getLocation, 600000); // Update every 10 minutes
    return () => clearInterval(interval);
  }, []);

  if (loading || !weather) return null;

  return (
    <div className="flex items-center gap-2">
      <span className="text-sm">{weather.city}</span>
      <img
        src={`https://openweathermap.org/img/wn/${weather.icon}.png`}
        alt="Weather icon"
        className="w-5 h-5"
      />
      <span>{weather.temp}°C</span>
    </div>
  );
};

export default WeatherDisplay;
File: ./src/features/Dock/components/Dock.tsx

import React, { useRef } from "react";
import {
  motion,
  useMotionValue,
  useSpring,
  useTransform,
  animate,
  MotionValue,
} from "framer-motion";
import { useAppStore } from "@hooks/useAppStore";
import AppIcon from "@shared/components/AppIcon/AppIcon";
import { apps } from "@shared/constants";
import { useWindowOpener } from "@hooks/useWindowOpener";

const SCALE = 1.75;
const DISTANCE = 70;
const NUDGE = 20;
const SPRING = {
  mass: 0.1,
  stiffness: 170,
  damping: 12,
};

interface Props {
  openApp: (appName: string, startPosition?: { x: number; y: number }) => void;
}

export default function Dock({ openApp }: Props) {
  const mouseLeft = useMotionValue(-Infinity);
  const { openApps, minimizeApp, restoreApp } = useAppStore();
  const { openOrRestoreWindow } = useWindowOpener();

  const handleDockIconClick = (appName: string) => {
    openOrRestoreWindow(appName);
  };

  return (
    <motion.div
      className="fixed bottom-6 left-1/2 -translate-x-1/2 flex gap-4 px-8 py-6 bg-gray-900/70 backdrop-blur-lg rounded-2xl shadow-lg z-50"
      onMouseMove={(e) => {
        const { left } = e.currentTarget.getBoundingClientRect();
        mouseLeft.set(e.clientX - left);
      }}
      onMouseLeave={() => mouseLeft.set(-Infinity)}
    >
      {apps.map((app) => {
        const isRunning = openApps.some((a) => a.appName === app.name);
        const isMinimized = openApps.some(
          (a) => a.appName === app.name && a.minimized
        );

        return (
          <DockItem
            key={app.name}
            app={app}
            openApp={() => handleDockIconClick(app.name)}
            mouseLeft={mouseLeft}
          />
        );
      })}
    </motion.div>
  );
}

interface DockItemProps {
  app: { 
    name: string; 
    icon: string; 
    link?: string;
    defaultFile?: string;
  };
  openApp: () => void;
  mouseLeft: MotionValue<number>;
}

function DockItem({ app, openApp, mouseLeft }: DockItemProps) {
  const ref = useRef<HTMLDivElement>(null);
  const { openApps } = useAppStore();
  const isMinimized = openApps.some(
    a => a.appName === app.name && a.minimized
  );

  const distance = useTransform(() => {
    const bounds = ref.current
      ? { x: ref.current.offsetLeft, w: ref.current.offsetWidth }
      : { x: 0, w: 0 };
    return mouseLeft.get() - bounds.x - bounds.w / 2;
  });

  const scale = useTransform(distance, [-DISTANCE, 0, DISTANCE], [1, SCALE, 1]);
  const scaleSpring = useSpring(scale, SPRING);

  const x = useTransform(() => {
    const d = distance.get();
    if (d === -Infinity) return 0;
    if (Math.abs(d) > DISTANCE) return Math.sign(d) * -1 * NUDGE;
    return (-d / DISTANCE) * NUDGE * scale.get();
  });
  const xSpring = useSpring(x, SPRING);
  const y = useMotionValue(0);

  return (
    <motion.div
      ref={ref}
      style={{ x: xSpring, scale: scaleSpring, y }}
      className={`group relative flex flex-col items-center ${isMinimized ? 'minimized' : ''}`}
      onClick={() => {
        animate(y, [0, -20, 0], {
          repeat: 2,
          duration: 0.7,
          ease: "easeInOut",
        });
        openApp();
      }}
    >
      <div className="w-20 h-20 flex items-center justify-center rounded-full bg-gray-800 shadow-md border border-gray-300 overflow-hidden">
        <motion.img
          src={app.icon}
          className="w-16 h-16 object-cover rounded-full"
          alt={app.name}
        />
      </div>

      {/* Label Above Icon (only visible on hover) */}
      <span className="absolute -top-10 bg-gray-900 text-white text-xs px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity">
        {app.name}
      </span>

      {/* Add a dot indicator for minimized windows */}
      {isMinimized && (
        <div className="absolute -bottom-1 w-1 h-1 bg-white rounded-full" />
      )}
    </motion.div>
  );
}

File: ./src/shared/components/AppIcon/AppIcon.tsx

import { motion } from "framer-motion";

interface AppIconProps {
  name: string;
  icon: string;
  onClick?: () => void;
  link?: string;
}

export default function AppIcon({ name, icon, onClick, link }: AppIconProps) {
  return (
    <div className="icon-wrapper" onClick={onClick}>
      <motion.img src={icon} className="icon-image" alt={name} />
    </div>
  );
}

File: ./src/shared/constants.ts

export const apps = [
  { name: "Finder", icon: "/icons/finder-icon.png" },
  { name: "Terminal", icon: "/icons/terminal.png" },
  {
    name: "Resume",
    icon: "/icons/pdf-icon.png",
    defaultFile: "/docs/Resume.pdf",
  },
  {
    name: "GitHub",
    icon: "/icons/github.png",
    link: "https://github.com/Chrisyhjiang",
  },
];

File: ./src/vite-env.d.ts

/// <reference types="vite/client" />

File: ./src/hooks/useWindowOpener.ts

import { useAppStore } from "./useAppStore";
import { apps } from "@shared/constants";

export const useWindowOpener = () => {
  const { openApps, openApp, restoreApp, minimizeApp } = useAppStore();

  const openOrRestoreWindow = (
    appName: string,
    options?: { filePath?: string }
  ) => {
    if (appName === "GitHub") {
      // Open GitHub profile in a new tab
      window.open(
        "https://github.com/Chrisyhjiang",
        "_blank",
        "noopener,noreferrer"
      );
      return;
    }

    const openedApp = openApps.find((a) => a.appName === appName);

    if (openedApp) {
      if (openedApp.minimized) {
        console.log(`[${appName}] Restoring minimized app`);
        restoreApp(appName);
      } else {
        console.log(`[${appName}] App already open`);
      }
    } else {
      console.log(`[${appName}] Opening new app`);
      // Correct center position calculation
      const startPosition = {
        x: (window.innerWidth - 600) / 2, // Center horizontally (assuming 600px width)
        y: (window.innerHeight - 400) / 2, // Center vertically (assuming 400px height)
      };

      // Check for default file if it's PDFViewer
      const appConfig = apps.find((a) => a.name === appName);
      const finalOptions = {
        ...options,
        startPosition,
        ...(appName === "Resume" && appConfig?.defaultFile
          ? { filePath: appConfig.defaultFile }
          : {}),
      };

      openApp(appName, finalOptions);
    }
  };

  return { openOrRestoreWindow };
};

File: ./src/hooks/useWindowManager.ts

import { create } from 'zustand';

interface WindowState {
  activeWindow: string | null;
  windowStack: string[];
  setActiveWindow: (windowId: string) => void;
  bringToFront: (windowId: string) => void;
  registerWindow: (windowId: string) => void;
}

export const useWindowManager = create<WindowState>((set) => ({
  activeWindow: null,
  windowStack: [],
  setActiveWindow: (windowId: string) => {
    console.log(`Setting active window: ${windowId}`);
    set({ activeWindow: windowId });
  },
  bringToFront: (windowId: string) => {
    console.log(`Bringing window to front: ${windowId}`);
    set((state) => {
      const newStack = [
        ...state.windowStack.filter(id => id !== windowId),
        windowId
      ];
      console.log(`Updated window stack: ${newStack}`);
      return {
        activeWindow: windowId,
        windowStack: newStack
      };
    });
  },
  registerWindow: (windowId: string) => {
    set((state) => ({
      windowStack: state.windowStack.includes(windowId) 
        ? state.windowStack 
        : [...state.windowStack, windowId]
    }));
  }
})); 
File: ./src/hooks/useAppStore.ts

import { create } from "zustand";
import { apps } from "@shared/constants";

interface WindowPosition {
  position: { x: number; y: number };
  size: { width: number; height: number };
}

interface DesktopIconState {
  position: { x: number; y: number };
  app: string;
}

interface AppState {
  openApps: {
    appName: string;
    minimized: boolean;
    lastPosition?: WindowPosition;
    startPosition?: { x: number; y: number };
    filePath?: string;
  }[];
  openApp: (appName: string, options?: { filePath?: string; startPosition?: { x: number; y: number } }) => void;
  minimizeApp: (appName: string) => void;
  restoreApp: (appName: string) => void;
  closeApp: (appName: string) => void;
  setWindowPosition: (appName: string, position: WindowPosition) => void;
  completeRestore: (appName: string) => void;
  desktopIcons: DesktopIconState[];
  updateIconPosition: (appName: string, position: { x: number; y: number }) => void;
  initializeDesktopIcons: () => void;
}

export const useAppStore = create<AppState>((set, get) => ({
  openApps: [],
  desktopIcons: [],

  openApp: (appName: string, options?: { filePath?: string; startPosition?: { x: number; y: number } }) => {
    console.log(`[${appName}] Opening app with options:`, options);
    set((state) => ({
      openApps: [
        ...state.openApps,
        { 
          appName, 
          minimized: false,
          startPosition: options?.startPosition,
          ...options 
        }
      ],
    }));
  },

  minimizeApp: (appName: string) =>
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: true }
          : app
      ),
    })),

  restoreApp: (appName: string) => {
    console.log(`[${appName}] Restoring app`);
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: false }
          : app
      ),
    }));
  },

  completeRestore: (appName: string) =>
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: false }
          : app
      ),
    })),

  closeApp: (appName) =>
    set((state) => ({
      openApps: state.openApps.filter((app) => app.appName !== appName),
    })),

  setWindowPosition: (appName, position) => 
    set(state => ({
      openApps: state.openApps.map(app => 
        app.appName === appName 
          ? { ...app, lastPosition: position }
          : app
      )
    })),

  updateIconPosition: (appName, position) =>
    set((state) => ({
      desktopIcons: state.desktopIcons.map((icon) =>
        icon.app === appName ? { ...icon, position } : icon
      ),
    })),

  initializeDesktopIcons: () => {
    const initialIcons = apps.map((app, index) => ({
      app: app.name,
      position: {
        x: 20,
        y: 20 + (index * 150)
      }
    }));
    
    set({ desktopIcons: initialIcons });
  },
}));


Directory structure of src excluding node_modules:

./src
├── App.tsx
├── assets
│   └── react.svg
├── features
│   ├── Desktop
│   │   ├── components
│   │   │   └── Desktop.tsx
│   │   ├── hooks
│   │   └── styles
│   ├── Dock
│   │   ├── components
│   │   │   └── Dock.tsx
│   │   ├── hooks
│   │   └── styles
│   │       └── Dock.css
│   ├── Finder
│   │   ├── components
│   │   │   └── Finder.tsx
│   │   ├── hooks
│   │   └── styles
│   │       └── Finder.css
│   ├── Loading
│   │   ├── Loading.tsx
│   │   └── styles
│   │       └── Loading.css
│   ├── PDFViewer
│   │   ├── components
│   │   │   └── PDFViewer.tsx
│   │   ├── hooks
│   │   └── styles
│   ├── Terminal
│   │   ├── components
│   │   │   └── Terminal.tsx
│   │   ├── hooks
│   │   └── styles
│   ├── Topbar
│   │   ├── components
│   │   │   ├── Topbar.tsx
│   │   │   └── WeatherDisplay.tsx
│   │   ├── hooks
│   │   └── styles
│   │       └── WeatherDisplay.css
│   └── Window
│       ├── components
│       │   └── Window.tsx
│       ├── hooks
│       └── styles
│           └── Window.css
├── hooks
│   ├── useAppStore.ts
│   ├── useWindowManager.ts
│   └── useWindowOpener.ts
├── main.tsx
├── shared
│   ├── components
│   │   └── AppIcon
│   │       └── AppIcon.tsx
│   └── constants.ts
├── styles
│   ├── Window.css
│   ├── global.css
│   └── index.css
└── vite-env.d.ts

38 directories, 26 files
