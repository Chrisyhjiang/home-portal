
File: ./src/App.tsx

import Desktop from "./features/Desktop/components/Desktop";

export default function App() {
  return (
    <div className="relative h-screen w-screen">
      {/* Video Background */}
      <video
        autoPlay
        loop
        muted
        playsInline
        className="absolute inset-0 w-full h-full object-cover z-0"
      >
        <source src="/background.mp4" type="video/mp4" />
        Your browser does not support the video tag.
      </video>

      {/* Content Overlay */}
      <div className="relative z-10">
        {/* macOS Desktop UI */}
        <Desktop />
      </div>
    </div>
  );
}

File: ./src/main.tsx

import { createRoot } from "react-dom/client";
import "./styles/index.css";
import App from "./App.tsx";

createRoot(document.getElementById("root")!).render(
  // üö® Remove StrictMode to avoid warnings
  <App />
);

File: ./src/features/PDFViewer/components/PDFViewer.tsx

interface PDFViewerProps {
  filePath?: string;
  onClose: () => void;
}

const PDFViewer: React.FC<PDFViewerProps> = ({ filePath, onClose }) => {
  if (!filePath || !filePath.endsWith(".pdf")) {
    return (
      <div className="p-4 text-white bg-red-500">No valid PDF selected.</div>
    );
  }

  const correctedPath = filePath.startsWith("/docs/")
    ? filePath
    : `/docs/${filePath.replace(/^\/?public\//, "")}`;

  return (
    <div className="w-full h-full">
      {/* Close Button */}
      <div className="absolute top-2 left-2 flex gap-2 z-50"></div>

      {/* PDF Viewer */}
      <iframe
        src={`${correctedPath}#zoom=125`}
        className="w-full h-full border-none"
        title="PDF Viewer"
      />
    </div>
  );
};

export default PDFViewer;

File: ./src/features/Terminal/components/Terminal.tsx

import { useState } from "react";
import { useAppStore } from "@hooks/useAppStore";

export default function Terminal() {
  const [output, setOutput] = useState<string[]>(["Welcome to Terminal"]);
  const [input, setInput] = useState("");
  const { openApp } = useAppStore();

  const commands = {
    ls: () => "Resume.pdf  Project1  Project2",
    clear: () => {
      setOutput([]);
      return "";
    },
    help: () =>
      "Available commands:\n- ls (List files)\n- show <file> (View PDF files)\n- clear (Clear terminal)\n- help (Show this help message)",
  };

  const handleCommand = (event: React.FormEvent) => {
    event.preventDefault();
    let newOutput = [...output, `$ ${input}`];

    const args = input.split(" ");
    const command = args[0];

    if (command === "show" && args[1]?.endsWith(".pdf")) {
      const filePath = `/docs/${args[1]}`;
      console.log("Opening PDF:", filePath);
      newOutput.push(`Opening ${args[1]}...`);
      openApp("PDFViewer", { filePath });
    } else if (commands[command]) {
      newOutput.push(commands[command]());
    } else {
      newOutput.push("Command not found. Type 'help' for a list of commands.");
    }

    setOutput(newOutput);
    setInput("");
  };

  return (
    <div className="p-4 bg-black text-green-400 font-mono w-full h-full overflow-auto">
      {output.map((line, index) => (
        <div key={index}>{line}</div>
      ))}
      <form onSubmit={handleCommand} className="flex">
        <span className="mr-2">$</span>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="bg-black border-none outline-none text-green-400 flex-grow"
          autoFocus
        />
      </form>
    </div>
  );
}

File: ./src/features/Desktop/components/Desktop.tsx

import { useAppStore } from "@hooks/useAppStore";
import Topbar from "@features/Topbar/components/Topbar";
import Dock from "@features/Dock/components/Dock";
import Finder from "@features/Finder/components/Finder";
import Terminal from "@features/Terminal/components/Terminal";
import Window from "@features/Window/components/Window";
import PDFViewer from "@features/PDFViewer/components/PDFViewer";
import { useRef, useEffect } from "react";
import { motion } from "framer-motion";

export default function Desktop() {
  const { openApps, openApp, closeApp } = useAppStore();

  console.log("openApps:", openApps); // ‚úÖ Debugging

  // ‚úÖ Persistent dragRefs that never reset
  const dragRefs = useRef<Record<string, React.RefObject<HTMLDivElement>>>({});

  // ‚úÖ Ensure refs exist for all openApps (without reinitializing on every render)
  useEffect(() => {
    openApps.forEach(({ appName }) => {
      if (!dragRefs.current[appName]) {
        dragRefs.current[appName] = { current: null };
      }
    });
  }, [openApps]);

  return (
    <div className="h-screen w-screen relative flex flex-col overflow-hidden pt-12 pb-20">
      <Topbar />

      <div className="flex-1 relative z-10 p-4">
        {openApps.map(({ appName, filePath }, index) => (
          <div
            key={appName}
            // Use absolute positioning with a z-index based on the index
            style={{ position: "absolute", zIndex: 20 + index }}
          >
            <Window appName={appName} closeApp={() => closeApp(appName)}>
              {appName === "Finder" && <Finder />}
              {appName === "Terminal" && <Terminal />}
              {appName === "PDFViewer" && (
                <PDFViewer
                  filePath={filePath}
                  onClose={() => closeApp(appName)}
                />
              )}
            </Window>
          </div>
        ))}
      </div>

      <Dock openApp={openApp} />
    </div>
  );
}

File: ./src/features/Window/components/Window.tsx

import React, { useState, useEffect } from "react";
import { Rnd } from "react-rnd";
import "../styles/Window.css";

interface WindowProps {
  title: string;
  isVisible: boolean;
  onMinimize: () => void;
  onClose: () => void;
  isMaximizedAlready?: boolean;
  children: React.ReactNode;
}

const Window: React.FC<WindowProps> = ({
  title, 
  isVisible,
  onMinimize,
  onClose,
  isMaximizedAlready = false,
  children,
}) => {
  // Initial size: 600x400 and initial position: centered based on window dimensions.
  const [size, setSize] = useState({ width: 600, height: 400 });
  const [position, setPosition] = useState({
    x: window.innerWidth / 2 - 300,
    y: window.innerHeight / 2 - 200,
  });
  const [isMaximized, setIsMaximized] = useState(isMaximizedAlready);

  useEffect(() => {
    if (isMaximized) {
      // When maximized, adjust size and position accordingly.
      setSize({ width: 1280, height: 800 });
      setPosition({
        x: window.innerWidth / 2 - 640,
        y: window.innerHeight / 2 - 400,
      });
    } else {
      // Restore to the default size and position.
      setSize({ width: 600, height: 400 });
      setPosition({
        x: window.innerWidth / 2 - 300,
        y: window.innerHeight / 2 - 200,
      });
    }
  }, [isMaximized]);

  const handleMinimize = () => onMinimize();
  const handleMaximize = () => {
    setIsMaximized(!isMaximized);
  };
  const handleClose = () => onClose();

  if (!isVisible) return null;

  return (
    <div className="window-container">
      <Rnd
        // Use the controlled size and position.
        size={size}
        position={position}
        onDragStop={(e, d) => setPosition({ x: d.x, y: d.y })}
        onResizeStop={(e, direction, ref, delta, newPosition) => {
          setSize({ width: ref.offsetWidth, height: ref.offsetHeight });
          setPosition(newPosition);
        }}
        minWidth={300}
        minHeight={200}
        // **Key change:** Set bounds to "window" so that the coordinate space matches window.innerWidth/innerHeight.
        bounds="window"
        dragHandleClassName="drag-handle"
        className="window-rnd"
        style={{ boxShadow: "0px 10px 30px rgba(0, 0, 0, 0.3)" }}
      >
        <div className="window-top-bar drag-handle">
          <span>{title}</span>
          <div className="window-controls">
            <button onClick={handleMinimize}>_</button>
            <button onClick={handleMaximize}>{isMaximized ? "‚ùê" : "[]"}</button>
            <button onClick={handleClose}>X</button>
          </div>
        </div>
        <div className="window-content">{children}</div>
      </Rnd>
    </div>
  );
};

export default Window;

File: ./src/features/Finder/components/Finder.tsx

import { useAppStore } from "@hooks/useAppStore";

export default function Finder() {
  const { openApp } = useAppStore(); // ‚úÖ Use store to open PDFViewer

  const files = [
    { name: "Resume.pdf", path: "/docs/Resume.pdf" }, // ‚úÖ Ensure exact casing
    { name: "Project 1", path: "https://github.com/Chrisyhjiang/project1" },
    { name: "Project 2", path: "https://github.com/Chrisyhjiang/project2" },
  ];

  return (
    <div className="p-4 bg-gray-800 text-white w-full h-full">
      <h2 className="text-xl font-bold">Finder</h2>
      <ul className="mt-4">
        {files.map((file) => (
          <li key={file.name} className="mt-2">
            {file.path.startsWith("http") ? (
              // ‚úÖ External links open in new tab
              <a
                href={file.path}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-400 hover:underline"
              >
                {file.name}
              </a>
            ) : (
              // ‚úÖ Open PDF inside the app
              <button
                onClick={() => openApp("PDFViewer", { filePath: file.path })}
                className="text-blue-400 hover:underline"
              >
                {file.name}
              </button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

File: ./src/features/Topbar/components/Topbar.tsx

import { useEffect, useState } from "react";

export default function Topbar() {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-10 bg-gray-900/80 text-white flex items-center justify-between px-4 z-50 shadow-md">
      <div className="flex items-center gap-4">
        <span className="text-lg">Ô£ø</span>
        <span className="text-sm">Finder</span>
      </div>
      <div className="flex gap-4 text-sm">
        <span>File</span>
        <span>Edit</span>
        <span>View</span>
        <span>Go</span>
        <span>Window</span>
        <span>Help</span>
      </div>
      <div className="text-sm">
        {time.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
      </div>
    </div>
  );
}

File: ./src/features/Dock/components/Dock.tsx

import React, { useRef } from "react";
import * as Tooltip from "@radix-ui/react-tooltip";
import {
  motion,
  useMotionValue,
  useSpring,
  useTransform,
  animate,
  MotionValue,
} from "framer-motion";
import AppIcon from "@shared/components/AppIcon/AppIcon";
import { apps } from "@shared/constants";

interface DockProps {
  openApp: (app: string) => void;
}

const SCALE = 1.75;
const DISTANCE = 70;
const NUDGE = 20;
const SPRING = {
  mass: 0.1,
  stiffness: 170,
  damping: 12,
};

export default function Dock({ openApp }: DockProps) {
  const mouseLeft = useMotionValue(-Infinity);
  const mouseRight = useMotionValue(-Infinity);

  return (
    <motion.div
      className="fixed bottom-6 left-1/2 -translate-x-1/2 flex gap-4 px-6 py-4 bg-gray-900/70 backdrop-blur-lg rounded-2xl shadow-lg z-50"
      onMouseMove={(e) => {
        const { left, right } = e.currentTarget.getBoundingClientRect();
        mouseLeft.set(e.clientX - left);
        mouseRight.set(right - e.clientX);
      }}
      onMouseLeave={() => {
        mouseLeft.set(-Infinity);
        mouseRight.set(-Infinity);
      }}
    >
      {apps.map((app) => (
        <DockItem
          key={app.name}
          app={app}
          openApp={openApp}
          mouseLeft={mouseLeft}
        />
      ))}
    </motion.div>
  );
}

interface DockItemProps {
  app: { name: string; icon: string; link?: string };
  openApp: (app: string) => void;
  mouseLeft: MotionValue<number>;
}

function DockItem({ app, openApp, mouseLeft }: DockItemProps) {
  const ref = useRef<HTMLDivElement>(null);

  const distance = useTransform(() => {
    const bounds = ref.current
      ? { x: ref.current.offsetLeft, w: ref.current.offsetWidth }
      : { x: 0, w: 0 };
    return mouseLeft.get() - bounds.x - bounds.w / 2;
  });

  const scale = useTransform(distance, [-DISTANCE, 0, DISTANCE], [1, SCALE, 1]);
  const scaleSpring = useSpring(scale, SPRING);

  const x = useTransform(() => {
    const d = distance.get();
    if (d === -Infinity) return 0;
    if (Math.abs(d) > DISTANCE) return Math.sign(d) * -1 * NUDGE;
    return (-d / DISTANCE) * NUDGE * scale.get();
  });
  const xSpring = useSpring(x, SPRING);
  const y = useMotionValue(0);

  return (
    <Tooltip.Provider>
      <Tooltip.Root>
        <Tooltip.Trigger asChild>
          <motion.div
            ref={ref}
            style={{ x: xSpring, scale: scaleSpring, y }}
            className="group relative flex flex-col items-center"
            onClick={() => {
              animate(y, [0, -20, 0], {
                repeat: 2,
                duration: 0.7,
                ease: "easeInOut",
              });
              if (!app.link) openApp(app.name);
            }}
          >
            <div className="w-14 h-14 flex items-center justify-center rounded-full bg-gray-800 shadow-md border border-gray-300 overflow-hidden">
              {app.link ? (
                <a href={app.link} target="_blank" rel="noopener noreferrer">
                  <motion.img
                    src={app.icon}
                    className="w-12 h-12 object-cover rounded-full"
                    alt={app.name}
                  />
                </a>
              ) : (
                // Notice we do not pass an onClick here to avoid duplication.
                <AppIcon
                  name={app.name}
                  icon={app.icon}
                  className="w-12 h-12 object-cover rounded-full"
                />
              )}
            </div>

            {/* Label Above Icon (only visible on hover) */}
            <span className="absolute -top-8 bg-gray-900 text-white text-xs px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity">
              {app.name}
            </span>
          </motion.div>
        </Tooltip.Trigger>

        <Tooltip.Portal>
          <Tooltip.Content
            sideOffset={8}
            className="bg-gray-700 px-2 py-1.5 text-sm rounded text-white border border-gray-600 shadow"
          >
            {app.name}
            <Tooltip.Arrow />
          </Tooltip.Content>
        </Tooltip.Portal>
      </Tooltip.Root>
    </Tooltip.Provider>
  );
}

File: ./src/shared/components/AppIcon/AppIcon.tsx

import { motion } from "framer-motion";

interface AppIconProps {
  name: string;
  icon: string;
  onClick?: () => void;
  link?: string;
}

export default function AppIcon({ name, icon, onClick, link }: AppIconProps) {
  return (
    <div className="icon-wrapper" onClick={onClick}>
      <motion.img src={icon} className="icon-image" alt={name} />
    </div>
  );
}

File: ./src/shared/constants.ts

export const apps = [
  { name: "Finder", icon: "/icons/finder-icon.png" },
  { name: "Terminal", icon: "/icons/terminal.png" },
  {
    name: "GitHub",
    icon: "/icons/github.png",
    link: "https://github.com/Chrisyhjiang",
  },
];

File: ./src/vite-env.d.ts

/// <reference types="vite/client" />

File: ./src/hooks/useAppStore.ts

import { create } from "zustand";

interface AppState {
  openApps: { appName: string; filePath?: string }[];
  openApp: (appName: string, options?: { filePath?: string }) => void;
  closeApp: (appName: string) => void;
}

export const useAppStore = create<AppState>((set, get) => ({
  openApps: [],
  openApp: (appName, options) =>
    set((state) => {
      // If already open, do not add again.
      if (state.openApps.find((app) => app.appName === appName)) {
        return state;
      }
      return { openApps: [...state.openApps, { appName, ...options }] };
    }),
  closeApp: (appName) =>
    set((state) => ({
      openApps: state.openApps.filter((app) => app.appName !== appName),
    })),
}));


Directory structure of src excluding node_modules:

./src
‚îú‚îÄ‚îÄ App.tsx
‚îú‚îÄ‚îÄ assets
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ react.svg
‚îú‚îÄ‚îÄ features
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Desktop
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Desktop.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Dock
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Dock.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Finder
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Finder.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ PDFViewer
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ PDFViewer.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Terminal
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Terminal.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Topbar
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Topbar.tsx
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Window
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Window.tsx
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ styles
‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ Window.css
‚îú‚îÄ‚îÄ hooks
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ useAppStore.ts
‚îú‚îÄ‚îÄ main.tsx
‚îú‚îÄ‚îÄ shared
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ components
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ AppIcon
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ AppIcon.tsx
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ constants.ts
‚îú‚îÄ‚îÄ styles
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ global.css
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.css
‚îî‚îÄ‚îÄ vite-env.d.ts

36 directories, 17 files
