
File: ./src/App.tsx

import Desktop from "./features/Desktop/components/Desktop";

export default function App() {
  return (
    <div className="relative h-screen w-screen">
      {/* Video Background */}
      <video
        autoPlay
        loop
        muted
        playsInline
        className="absolute inset-0 w-full h-full object-cover z-0"
      >
        <source src="/background.mp4" type="video/mp4" />
        Your browser does not support the video tag.
      </video>

      {/* Content Overlay */}
      <div className="relative z-10">
        {/* macOS Desktop UI */}
        <Desktop />
      </div>
    </div>
  );
}

File: ./src/main.tsx

import { createRoot } from "react-dom/client";
import "./styles/index.css";
import App from "./App.tsx";

createRoot(document.getElementById("root")!).render(
  // 🚨 Remove StrictMode to avoid warnings
  <App />
);

File: ./src/features/PDFViewer/components/PDFViewer.tsx

interface PDFViewerProps {
  filePath?: string;
  onClose: () => void;
}

const PDFViewer: React.FC<PDFViewerProps> = ({ filePath, onClose }) => {
  if (!filePath || !filePath.endsWith(".pdf")) {
    return (
      <div className="p-4 text-white bg-red-500">No valid PDF selected.</div>
    );
  }

  const correctedPath = filePath.startsWith("/docs/")
    ? filePath
    : `/docs/${filePath.replace(/^\/?public\//, "")}`;

  return (
    <div className="w-full h-full">
      {/* PDF Viewer */}
      <iframe
        src={`${correctedPath}#zoom=175&view=FitH&toolbar=0&navpanes=0&scrollbar=0&page=1`}
        className="w-full h-full border-none"
        title="PDF Viewer"
      />
    </div>
  );
};

export default PDFViewer;

File: ./src/features/Terminal/components/Terminal.tsx

import { useState } from "react";
import { useAppStore } from "@hooks/useAppStore";

export default function Terminal() {
  const [output, setOutput] = useState<string[]>(["Welcome to Terminal"]);
  const [input, setInput] = useState("");
  const { openApp } = useAppStore();

  const commands = {
    ls: () => "Resume.pdf  Project1  Project2",
    clear: () => {
      setOutput([]);
      return "";
    },
    help: () =>
      "Available commands:\n- ls (List files)\n- show <file> (View PDF files)\n- clear (Clear terminal)\n- help (Show this help message)",
  };

  const handleCommand = (event: React.FormEvent) => {
    event.preventDefault();
    let newOutput = [...output, `$ ${input}`];

    const args = input.split(" ");
    const command = args[0];

    if (command === "show" && args[1]?.endsWith(".pdf")) {
      const filePath = `/docs/${args[1]}`;
      console.log("Opening PDF:", filePath);
      newOutput.push(`Opening ${args[1]}...`);
      openApp("PDFViewer", { filePath });
    } else if (commands[command]) {
      newOutput.push(commands[command]());
    } else {
      newOutput.push("Command not found. Type 'help' for a list of commands.");
    }

    setOutput(newOutput);
    setInput("");
  };

  return (
    <div className="p-4 bg-black text-green-400 font-mono w-full h-full overflow-auto">
      {output.map((line, index) => (
        <div key={index}>{line}</div>
      ))}
      <form onSubmit={handleCommand} className="flex">
        <span className="mr-2">$</span>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="bg-black border-none outline-none text-green-400 flex-grow"
          autoFocus
        />
      </form>
    </div>
  );
}

File: ./src/features/Desktop/components/Desktop.tsx

import { useAppStore } from "@hooks/useAppStore";
import Topbar from "@features/Topbar/components/Topbar";
import Dock from "@features/Dock/components/Dock";
import Finder from "@features/Finder/components/Finder";
import Terminal from "@features/Terminal/components/Terminal";
import Window from "@features/Window/components/Window";
import PDFViewer from "@features/PDFViewer/components/PDFViewer";
import { useRef, useEffect } from "react";
import { apps } from "@shared/constants";

export default function Desktop() {
  const { openApps, openApp, closeApp, minimizeApp, restoreApp } = useAppStore();

  // Only log when debugging specific issues
  // console.log("openApps:", openApps); // Remove or comment out this line

  // ✅ Persistent dragRefs that never reset
  const dragRefs = useRef<Record<string, React.RefObject<HTMLDivElement>>>({});

  // ✅ Ensure refs exist for all openApps (without reinitializing on every render)
  useEffect(() => {
    openApps.forEach(({ appName }) => {
      if (!dragRefs.current[appName]) {
        dragRefs.current[appName] = { current: null };
      }
    });
  }, [openApps]);

  const handleMinimize = (appName: string) => {
    minimizeApp(appName);
  };

  const handleDockIconClick = (appName: string) => {
    const app = openApps.find(a => a.appName === appName);
    const iconImg = document.querySelector(`img[alt="${appName}"]`);
    const dockIcon = iconImg?.closest('.group');
    
    if (!dockIcon) {
      console.error('Could not find dock icon for:', appName);
      return;
    }

    const dockIconRect = dockIcon.getBoundingClientRect();
    const startPosition = {
      x: dockIconRect.left,
      y: dockIconRect.top
    };

    console.log(`[${appName}] Dock click - Current state:`, app);
    
    if (app?.minimized) {
      console.log(`[${appName}] Restoring minimized app`);
      restoreApp(appName);
    } else if (!app) {
      console.log(`[${appName}] Opening new app from:`, startPosition);
      const appConfig = apps.find(a => a.name === appName);
      if (appName === "PDFViewer" && appConfig?.defaultFile) {
        openApp(appName, { filePath: appConfig.defaultFile, startPosition });
      } else {
        openApp(appName, { startPosition });
      }
    }
  };

  return (
    <div className="h-screen w-screen relative flex flex-col overflow-hidden pt-12 pb-20">
      <Topbar />

      <div className="flex-1 relative z-10 p-4">
        {openApps.map(({ appName, filePath, minimized, startPosition }, index) => {
          console.log(`Rendering ${appName}:`, { minimized, startPosition });
          return (
            <div
              key={appName}
              style={{ 
                position: "absolute", 
                zIndex: 20 + index,
                display: minimized ? 'none' : 'block'
              }}
            >
              <Window
                title={appName}
                isVisible={true}
                onClose={() => closeApp(appName)}
                onMinimize={() => handleMinimize(appName)}
              >
                {appName === "Finder" && <Finder />}
                {appName === "Terminal" && <Terminal />}
                {appName === "PDFViewer" && (
                  <PDFViewer
                    filePath={filePath}
                    onClose={() => closeApp(appName)}
                  />
                )}
              </Window>
            </div>
          );
        })}
      </div>

      <Dock 
        openApp={(appName: string) => {
          const app = openApps.find(a => a.appName === appName);
          console.log(`[${appName}] Dock click - Current state:`, app);
          
          if (app?.minimized) {
            // If app is minimized, restore it with animation
            console.log(`[${appName}] Restoring minimized app`);
            restoreApp(appName, true); // Add a second parameter to indicate restore from dock
          } else if (!app) {
            // If app doesn't exist, open it fresh
            console.log(`[${appName}] Opening new app`);
            const appConfig = apps.find(a => a.name === appName);
            if (appName === "PDFViewer" && appConfig?.defaultFile) {
              openApp(appName, { filePath: appConfig.defaultFile });
            } else {
              openApp(appName);
            }
          }
          // If app exists and isn't minimized, do nothing
        }} 
      />
    </div>
  );
}

File: ./src/features/Window/components/Window.tsx

import React, { useState, useEffect } from "react";
import { Rnd } from "react-rnd";
import { motion, animate } from "framer-motion";
import { useAppStore } from "@hooks/useAppStore";
import "../styles/Window.css";
import { AnimatePresence } from "framer-motion";

interface WindowProps {
  title: string;
  isVisible: boolean;
  onClose: () => void;
  onMinimize: () => void;
  isMaximizedAlready?: boolean;
  children: React.ReactNode;
  isRestoringFromDock?: boolean;
}

const Window: React.FC<WindowProps> = ({
  title,
  isVisible,
  onClose,
  onMinimize,
  isMaximizedAlready = false,
  children,
  isRestoringFromDock = false,
}) => {
  const [size, setSize] = useState({ width: 600, height: 400 });
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [isMaximized, setIsMaximized] = useState(isMaximizedAlready);
  const [isMinimizing, setIsMinimizing] = useState(false);
  const { openApps, setWindowPosition, minimizeApp, restoreApp } = useAppStore();
  const windowClassName = `window-rnd-${title.toLowerCase().replace(/\s+/g, '-')}`;
  const [isAnimating, setIsAnimating] = useState(false);

  useEffect(() => {
    if (title === "PDFViewer") {
      setSize({ width: 900, height: 1100 });
    }

    const app = openApps.find(a => a.appName === title);
    console.log(`[${title}] Window mounted:`, app);

    if (app?.startPosition) {
      console.log(`[${title}] Starting open animation from:`, app.startPosition);
      setPosition(app.startPosition);
      setIsAnimating(true);
      handleOpenAnimation(app.startPosition);
    } else if (app?.lastPosition) {
      setPosition(app.lastPosition.position);
      setSize(app.lastPosition.size);
    } else {
      setPosition({ x: 20, y: 20 });
    }
  }, [title, openApps]);

  const handleOpenAnimation = async (startPos: { x: number; y: number }) => {
    const targetPosition = { x: 20, y: 20 };
    console.log(`[${title}] Animating from:`, startPos, 'to:', targetPosition);

    try {
      const rndElement = document.querySelector(`.${windowClassName}`);
      if (!rndElement) {
        console.error('Could not find window element');
        return;
      }

      await animate(
        rndElement,
        {
          scale: [0.1, 1],
          x: [startPos.x, targetPosition.x],
          y: [startPos.y, targetPosition.y]
        },
        {
          duration: 0.5,
          ease: "easeOut"
        }
      );

      setPosition(targetPosition);
      setWindowPosition(title, {
        position: targetPosition,
        size
      });
    } catch (error) {
      console.error('Animation failed:', error);
      setPosition(targetPosition);
    } finally {
      setIsAnimating(false);
    }
  };

  const handleMinimize = async () => {
    console.log(`[${title}] Starting minimize animation`);
    setIsMinimizing(true);
    
    const rndElement = document.querySelector(`.${windowClassName}`) as HTMLElement;
    if (!rndElement) {
      console.error('Could not find window element with class:', windowClassName);
      return;
    }

    const iconImg = document.querySelector(`img[alt="${title}"]`);
    const dockIcon = iconImg?.closest('.group');
    
    if (!dockIcon) {
      console.error('Could not find dock icon for:', title);
      return;
    }

    const dockIconRect = dockIcon.getBoundingClientRect();
    
    if (dockIconRect) {
      setWindowPosition(title, { 
        position: { x: position.x, y: position.y },
        size 
      });

      const targetX = dockIconRect.left - rndElement.offsetLeft;
      const targetY = dockIconRect.top - rndElement.offsetTop;
      
      try {
        await animate(
          rndElement,
          {
            scale: [1, 0.8, 0.6, 0.4, 0.2, 0.1],
            x: [0, targetX * 0.1, targetX * 0.3, targetX * 0.5, targetX * 0.8, targetX],
            y: [0, -80, -40, targetY * 0.3, targetY * 0.7, targetY]
          },
          {
            duration: 0.5,
            ease: [0.32, 0, 0.67, 0],
            times: [0, 0.2, 0.4, 0.6, 0.8, 1]
          }
        );
        
        onMinimize();
      } catch (error) {
        console.error('Animation failed:', error);
        onMinimize();
      }
    } else {
      onMinimize();
    }
    
    setIsMinimizing(false);
  };

  const handleDockClick = async () => {
    const rndElement = document.querySelector(`.${windowClassName}`) as HTMLElement;
    if (!rndElement) return;

    const iconImg = document.querySelector(`img[alt="${title}"]`);
    const dockIcon = iconImg?.closest('.group');
    if (!dockIcon) return;

    const dockIconRect = dockIcon.getBoundingClientRect();
    const app = openApps.find(a => a.appName === title);
    
    if (dockIconRect && app?.lastPosition) {
      const targetX = app.lastPosition.position.x - dockIconRect.left;
      const targetY = app.lastPosition.position.y - dockIconRect.top;

      // Start from dock position
      setPosition({ x: dockIconRect.left, y: dockIconRect.top });
      
      try {
        await animate(
          rndElement,
          {
            scale: [0.1, 0.2, 0.4, 0.6, 0.8, 1],
            x: [0, targetX * 0.2, targetX * 0.4, targetX * 0.6, targetX * 0.8, targetX],
            y: [0, -80, -40, targetY * 0.3, targetY * 0.7, targetY]
          },
          {
            duration: 0.5,
            ease: [0.32, 0, 0.67, 0],
            times: [0, 0.2, 0.4, 0.6, 0.8, 1]
          }
        );
        
        restoreApp(title);
      } catch (error) {
        console.error('Animation failed:', error);
        restoreApp(title);
      }
    }
  };

  if (!isVisible || openApps.find(a => a.appName === title)?.minimized) return null;

  return (
    <AnimatePresence>
      {isVisible && !openApps.find(a => a.appName === title)?.minimized && (
        <div 
          className={windowClassName}
          style={{
            position: 'absolute',
            left: position.x,
            top: position.y,
            transform: isAnimating ? 'scale(0.1)' : 'none',
            transformOrigin: 'top left',
            transition: 'transform 0.5s ease-out'
          }}
        >
          <Rnd
            size={size}
            position={{ x: 0, y: 0 }}
            bounds="window"
            dragHandleClassName="drag-handle"
            onDragStop={(e, d) => {
              setPosition({ x: d.x + position.x, y: d.y + position.y });
            }}
            onResizeStop={(e, direction, ref, delta, newPosition) => {
              setSize({ width: ref.offsetWidth, height: ref.offsetHeight });
              setPosition({ x: newPosition.x + position.x, y: newPosition.y + position.y });
            }}
            enableResizing={!isAnimating}
            disableDragging={isAnimating}
          >
            <div className="window-top-bar drag-handle">
              <div className="window-controls">
                <button
                  onClick={handleMinimize}
                  className="minimize-button"
                >
                  _
                </button>
                <button onClick={() => setIsMaximized(!isMaximized)}>
                  {isMaximized ? "❐" : "[]"}
                </button>
                <button onClick={onClose}>X</button>
              </div>
              <span className="window-title">{title}</span>
            </div>

            <div className="window-content">{children}</div>
          </Rnd>
        </div>
      )}
    </AnimatePresence>
  );
};

export default Window;

File: ./src/features/Finder/components/Finder.tsx

import { useAppStore } from "@hooks/useAppStore";
import "../styles/Finder.css"; // Ensure you have this file for styling

export default function Finder() {
  const { openApp } = useAppStore(); // ✅ Use store to open PDFViewer

  const files = [
    { name: "resume.pdf", path: "/docs/resume.pdf" }, // ✅ Ensure exact casing
    { name: "Project 1", path: "https://github.com/Chrisyhjiang/project1" },
    { name: "Project 2", path: "https://github.com/Chrisyhjiang/project2" },
  ];

  return (
    <div className="finder-container">
      <h2 className="finder-title">Finder</h2>
      <ul className="finder-list">
        {files.map((file) => (
          <li key={file.name} className="finder-item">
            {file.path.startsWith("http") ? (
              <a
                href={file.path}
                target="_blank"
                rel="noopener noreferrer"
                className="finder-link"
              >
                {file.name}
              </a>
            ) : (
              <button
                onClick={() => openApp("PDFViewer", { filePath: file.path })}
                className="finder-button"
              >
                {file.name}
              </button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

File: ./src/features/Topbar/components/Topbar.tsx

import { useEffect, useState } from "react";

export default function Topbar() {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-10 bg-gray-900/80 text-white flex items-center justify-between px-4 z-50 shadow-md">
      <div className="flex items-center gap-4">
        <span className="text-lg"></span>
        <span className="text-sm">Finder</span>
      </div>
      <div className="flex gap-4 text-sm">
        <span>File</span>
        <span>Edit</span>
        <span>View</span>
        <span>Go</span>
        <span>Window</span>
        <span>Help</span>
      </div>
      <div className="text-sm">
        {time.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
      </div>
    </div>
  );
}

File: ./src/features/Dock/components/Dock.tsx

import React, { useRef } from "react";
import * as Tooltip from "@radix-ui/react-tooltip";
import {
  motion,
  useMotionValue,
  useSpring,
  useTransform,
  animate,
  MotionValue,
} from "framer-motion";
import { useAppStore } from "@hooks/useAppStore";
import AppIcon from "@shared/components/AppIcon/AppIcon";
import { apps } from "@shared/constants";

const SCALE = 1.75;
const DISTANCE = 70;
const NUDGE = 20;
const SPRING = {
  mass: 0.1,
  stiffness: 170,
  damping: 12,
};

interface Props {
  openApp: (appName: string, startPosition?: { x: number; y: number }) => void;
}

export default function Dock({ openApp }: Props) {
  const mouseLeft = useMotionValue(-Infinity);
  const { openApps, minimizeApp, restoreApp } = useAppStore();

  const handleDockIconClick = (appName: string) => {
    const app = openApps.find(a => a.appName === appName);
    const iconImg = document.querySelector(`img[alt="${appName}"]`);
    const dockIcon = iconImg?.closest('.group');
    
    if (!dockIcon) {
      console.error('Could not find dock icon for:', appName);
      return;
    }

    const dockIconRect = dockIcon.getBoundingClientRect();
    const startPosition = {
      x: dockIconRect.left,
      y: dockIconRect.top
    };

    if (app) {
      if (app.minimized) {
        // If app is minimized, restore it
        restoreApp(appName);
      }
      // If app is already open and not minimized, do nothing
    } else {
      // If app isn't open at all, open it with starting position
      openApp(appName, { startPosition });
    }
  };

  return (
    <motion.div
      className="fixed bottom-6 left-1/2 -translate-x-1/2 flex gap-4 px-6 py-4 bg-gray-900/70 backdrop-blur-lg rounded-2xl shadow-lg z-50"
      onMouseMove={(e) => {
        const { left } = e.currentTarget.getBoundingClientRect();
        mouseLeft.set(e.clientX - left);
      }}
      onMouseLeave={() => mouseLeft.set(-Infinity)}
    >
      {apps.map((app) => {
        const isRunning = openApps.some((a) => a.appName === app.name);
        const isMinimized = openApps.some(
          (a) => a.appName === app.name && a.minimized
        );

        return (
          <DockItem
            key={app.name}
            app={app}
            openApp={() => handleDockIconClick(app.name)}
            mouseLeft={mouseLeft}
          />
        );
      })}
    </motion.div>
  );
}

interface DockItemProps {
  app: { 
    name: string; 
    icon: string; 
    link?: string;
    defaultFile?: string;
  };
  openApp: () => void;
  mouseLeft: MotionValue<number>;
}

function DockItem({ app, openApp, mouseLeft }: DockItemProps) {
  const ref = useRef<HTMLDivElement>(null);
  const { openApps } = useAppStore();
  const isMinimized = openApps.some(
    a => a.appName === app.name && a.minimized
  );

  const distance = useTransform(() => {
    const bounds = ref.current
      ? { x: ref.current.offsetLeft, w: ref.current.offsetWidth }
      : { x: 0, w: 0 };
    return mouseLeft.get() - bounds.x - bounds.w / 2;
  });

  const scale = useTransform(distance, [-DISTANCE, 0, DISTANCE], [1, SCALE, 1]);
  const scaleSpring = useSpring(scale, SPRING);

  const x = useTransform(() => {
    const d = distance.get();
    if (d === -Infinity) return 0;
    if (Math.abs(d) > DISTANCE) return Math.sign(d) * -1 * NUDGE;
    return (-d / DISTANCE) * NUDGE * scale.get();
  });
  const xSpring = useSpring(x, SPRING);
  const y = useMotionValue(0);

  return (
    <Tooltip.Provider>
      <Tooltip.Root>
        <Tooltip.Trigger asChild>
          <motion.div
            ref={ref}
            style={{ x: xSpring, scale: scaleSpring, y }}
            className={`group relative flex flex-col items-center ${isMinimized ? 'minimized' : ''}`}
            onClick={() => {
              animate(y, [0, -20, 0], {
                repeat: 2,
                duration: 0.7,
                ease: "easeInOut",
              });
              openApp();
            }}
          >
            <div className="w-14 h-14 flex items-center justify-center rounded-full bg-gray-800 shadow-md border border-gray-300 overflow-hidden">
              <motion.img
                src={app.icon}
                className="w-12 h-12 object-cover rounded-full"
                alt={app.name}
              />
            </div>

            {/* Label Above Icon (only visible on hover) */}
            <span className="absolute -top-8 bg-gray-900 text-white text-xs px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity">
              {app.name}
            </span>

            {/* Add a dot indicator for minimized windows */}
            {isMinimized && (
              <div className="absolute -bottom-1 w-1 h-1 bg-white rounded-full" />
            )}
          </motion.div>
        </Tooltip.Trigger>

        <Tooltip.Portal>
          <Tooltip.Content
            sideOffset={8}
            className="bg-gray-700 px-2 py-1.5 text-sm rounded text-white border border-gray-600 shadow"
          >
            {app.name}
            <Tooltip.Arrow />
          </Tooltip.Content>
        </Tooltip.Portal>
      </Tooltip.Root>
    </Tooltip.Provider>
  );
}

File: ./src/shared/components/AppIcon/AppIcon.tsx

import { motion } from "framer-motion";

interface AppIconProps {
  name: string;
  icon: string;
  onClick?: () => void;
  link?: string;
}

export default function AppIcon({ name, icon, onClick, link }: AppIconProps) {
  return (
    <div className="icon-wrapper" onClick={onClick}>
      <motion.img src={icon} className="icon-image" alt={name} />
    </div>
  );
}

File: ./src/shared/constants.ts

export const apps = [
  { name: "Finder", icon: "/icons/finder-icon.png" },
  { name: "Terminal", icon: "/icons/terminal.png" },
  { 
    name: "PDFViewer", 
    icon: "/icons/pdf-icon.png",
    defaultFile: "/docs/Resume.pdf"
  },
  {
    name: "GitHub",
    icon: "/icons/github.png",
    link: "https://github.com/Chrisyhjiang",
  },
];

File: ./src/vite-env.d.ts

/// <reference types="vite/client" />

File: ./src/hooks/useAppStore.ts

import { create } from "zustand";

interface WindowPosition {
  position: { x: number; y: number };
  size: { width: number; height: number };
}

interface AppState {
  openApps: {
    appName: string;
    minimized: boolean;
    lastPosition?: WindowPosition;
    startPosition?: { x: number; y: number };
    filePath?: string;
  }[];
  openApp: (appName: string, options?: { filePath?: string; startPosition?: { x: number; y: number } }) => void;
  minimizeApp: (appName: string) => void;
  restoreApp: (appName: string) => void;
  closeApp: (appName: string) => void;
  setWindowPosition: (appName: string, position: WindowPosition) => void;
  completeRestore: (appName: string) => void;
}

export const useAppStore = create<AppState>((set, get) => ({
  openApps: [],

  openApp: (appName: string, options?: { filePath?: string; startPosition?: { x: number; y: number } }) => {
    console.log(`[${appName}] Opening app with options:`, options);
    set((state) => ({
      openApps: [
        ...state.openApps,
        { 
          appName, 
          minimized: false,
          startPosition: options?.startPosition,
          ...options 
        }
      ],
    }));
  },

  minimizeApp: (appName: string) =>
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: true }
          : app
      ),
    })),

  restoreApp: (appName: string) => {
    console.log(`[${appName}] Restoring app`);
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: false }
          : app
      ),
    }));
  },

  completeRestore: (appName: string) =>
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: false }
          : app
      ),
    })),

  closeApp: (appName) =>
    set((state) => ({
      openApps: state.openApps.filter((app) => app.appName !== appName),
    })),

  setWindowPosition: (appName, position) => 
    set(state => ({
      openApps: state.openApps.map(app => 
        app.appName === appName 
          ? { ...app, lastPosition: position }
          : app
      )
    })),
}));


Directory structure of src excluding node_modules:

./src
├── App.tsx
├── assets
│   └── react.svg
├── features
│   ├── Desktop
│   │   └── components
│   │       └── Desktop.tsx
│   ├── Dock
│   │   ├── components
│   │   │   └── Dock.tsx
│   │   └── styles
│   │       └── Dock.css
│   ├── Finder
│   │   ├── components
│   │   │   └── Finder.tsx
│   │   └── styles
│   │       └── Finder.css
│   ├── PDFViewer
│   │   └── components
│   │       └── PDFViewer.tsx
│   ├── Terminal
│   │   └── components
│   │       └── Terminal.tsx
│   ├── Topbar
│   │   └── components
│   │       └── Topbar.tsx
│   └── Window
│       ├── components
│       │   └── Window.tsx
│       └── styles
│           └── Window.css
├── hooks
│   └── useAppStore.ts
├── main.tsx
├── shared
│   ├── components
│   │   └── AppIcon
│   │       └── AppIcon.tsx
│   └── constants.ts
├── styles
│   ├── global.css
│   └── index.css
└── vite-env.d.ts

25 directories, 19 files
