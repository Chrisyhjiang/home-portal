import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
import Desktop from "./components/Desktop";

export default function App() {
  return <Desktop />;
}
import { createRoot } from 'react-dom/client';
import "./styles/index.css";
import App from './App.tsx';

createRoot(document.getElementById('root')!).render(
  // ðŸš¨ Remove StrictMode to avoid warnings
  <App />
);import { useAppStore } from "../store/useAppStore";
import Topbar from "./Topbar";
import Dock from "./Dock";
import Finder from "./Finder";
import Terminal from "./Terminal";
import Window from "./Window";
import PDFViewer from "./PDFViewer";
import { useRef, useEffect, useMemo } from "react";
import Draggable from "react-draggable";
import { motion } from "framer-motion";
import "../styles/mac_background.css";

export default function Desktop() {
  const { openApps, openApp, closeApp } = useAppStore();

  console.log("openApps:", openApps); // âœ… Debugging

  // âœ… Fix: Ensure consistent hook order
  const dragRefs = useMemo(() => {
    return openApps.reduce((acc, { appName }) => {
      acc[appName] = acc[appName] || { current: null }; // âœ… Fix missing ref
      return acc;
    }, {} as Record<string, React.RefObject<HTMLDivElement>>);
  }, [openApps]);

  return (
    <div className="h-screen w-screen relative flex flex-col overflow-hidden pt-12 pb-20">
      <Topbar />

      <div className="flex-1 relative z-10 p-4">
        {openApps.map(({ appName, filePath }, index) => (
          <Draggable key={appName} nodeRef={dragRefs[appName]}>
            <motion.div
              ref={dragRefs[appName]}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className={`absolute ${
                appName === "PDFViewer" ? "w-[80vw] h-[80vh]" : "w-80 h-96"
              } bg-gray-700 rounded-lg shadow-lg flex flex-col backdrop-blur-xl border border-gray-600`}
              style={{ zIndex: 20 + index }}
            >
              <Window appName={appName} closeApp={() => closeApp(appName)}>
                {appName === "Finder" && <Finder />}
                {appName === "Terminal" && <Terminal />}
                {appName === "PDFViewer" && <PDFViewer filePath={filePath} />}
              </Window>
            </motion.div>
          </Draggable>
        ))}
      </div>

      <Dock openApp={openApp} />
    </div>
  );
}import { useEffect, useState } from "react";

export default function Topbar() {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-10 bg-gray-900 text-white flex items-center justify-between px-4 z-50 shadow-md">
      <div className="flex items-center gap-4">
        <span className="text-lg">ï£¿</span>
        <span className="text-sm">Finder</span>
      </div>
      <div className="flex gap-4 text-sm">
        <span>File</span>
        <span>Edit</span>
        <span>View</span>
        <span>Go</span>
        <span>Window</span>
        <span>Help</span>
      </div>
      <div className="text-sm">
        {time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
      </div>
    </div>
  );
}
import { useEffect, useState } from "react";

export default function Finder() {
  const [files, setFiles] = useState([
    { name: "Resume.pdf", link: "/docs/resume.pdf" },
    { name: "Project 1", link: "https://github.com/Chrisyhjiang/project1" },
    { name: "Project 2", link: "https://github.com/Chrisyhjiang/project2" }
  ]);

  return (
    <div className="p-4 bg-gray-800 text-white w-full h-full">
      <h2 className="text-xl font-bold">Finder</h2>
      <ul className="mt-4">
        {files.map((file) => (
          <li key={file.name} className="mt-2">
            <a href={file.link} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline">
              {file.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
  );
}
import { useState } from "react";
import { useAppStore } from "../store/useAppStore";

export default function Terminal() {
  const [output, setOutput] = useState<string[]>(["Welcome to Terminal"]);
  const [input, setInput] = useState("");
  const { openApp } = useAppStore();

  const commands = {
    ls: () => "Resume.pdf  Project1  Project2",
    clear: () => {
      setOutput([]);
      return "";
    },
    help: () =>
      "Available commands:\n- ls (List files)\n- show <file> (View PDF files)\n- clear (Clear terminal)\n- help (Show this help message)",
  };

  const handleCommand = (event: React.FormEvent) => {
    event.preventDefault();
    let newOutput = [...output, `> ${input}`];
  
    const args = input.split(" ");
    const command = args[0];
  
    if (command === "show" && args[1]?.endsWith(".pdf")) {
      const filePath = `/docs/${args[1]}`; // Ensure the case matches the actual file name
      console.log("Opening PDF:", filePath); // Debugging
      newOutput.push(`Opening ${args[1]}...`);
      openApp("PDFViewer", { filePath });
    } else if (commands[command]) {
      newOutput.push(commands[command]());
    } else {
      newOutput.push("Command not found. Type 'help' for a list of commands.");
    }
  
    setOutput(newOutput);
    setInput("");
  };

  return (
    <div className="p-4 bg-black text-green-400 font-mono w-full h-full overflow-auto">
      {output.map((line, index) => (
        <div key={index}>{line}</div>
      ))}
      <form onSubmit={handleCommand} className="mt-2">
        <span>$ </span>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="bg-black border-none outline-none text-green-400 w-full"
          autoFocus
        />
      </form>
    </div>
  );
}
import { motion } from "framer-motion";
import AppIcon from "./AppIcon";
import { apps } from "../constants";

interface DockProps {
  openApp: (app: string) => void;
}

export default function Dock({ openApp }: DockProps) {
  return (
    <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 flex justify-center z-50">
      <div className="flex gap-4 bg-gray-800/80 backdrop-blur-md p-3 rounded-2xl flex-row items-end shadow-lg">
        {apps.map((app, index) => (
          <motion.div
            key={app.name}
            whileHover={{ scale: 1.4 }}
            transition={{ type: "spring", stiffness: 300 }}
          >
            {app.link ? (
              <a href={app.link} target="_blank" rel="noopener noreferrer">
                <img
                  src={app.icon}
                  className="w-12 h-12 cursor-pointer hover:scale-110 transition-transform"
                  alt={app.name}
                />
              </a>
            ) : (
              <AppIcon
                name={app.name}
                icon={app.icon}
                onClick={() => openApp(app.name)}
              />
            )}
          </motion.div>
        ))}
      </div>
    </div>
  );
}
import { motion } from "framer-motion";

interface AppIconProps {
  name: string;
  icon: string;
  onClick?: () => void;
  link?: string;
}

export default function AppIcon({ name, icon, onClick, link }: AppIconProps) {
  return link ? (
    <a href={link} target="_blank" rel="noopener noreferrer">
      <motion.img
        src={icon}
        className="w-12 h-12 cursor-pointer hover:scale-110 transition-transform"
        alt={name}
      />
    </a>
  ) : (
    <motion.img
      src={icon}
      className="w-12 h-12 cursor-pointer hover:scale-110 transition-transform"
      onClick={onClick}
      alt={name}
    />
  );
}
interface PDFViewerProps {
  filePath?: string;
}

const PDFViewer: React.FC<PDFViewerProps> = ({ filePath }) => {
  if (!filePath || !filePath.endsWith(".pdf")) {
    return <div className="p-4 text-white bg-red-500">No valid PDF selected.</div>;
  }

  console.log("Rendering PDFViewer with filePath:", filePath); // âœ… Debugging

  return (
    <iframe
      src={filePath}
      className="w-full h-full border-none bg-white"
      title="PDF Viewer"
      style={{ minHeight: "90vh", minWidth: "90vw" }} // âœ… Ensure full screen
    />
  );
};
export default PDFViewer;
import { motion } from "framer-motion";
import Draggable from "react-draggable";
import { useRef } from "react";

interface WindowProps {
  appName: string;
  closeApp: () => void;
  children: React.ReactNode;
}

export default function Window({ appName, closeApp, children }: WindowProps) {
  const nodeRef = useRef(null); // âœ… Define nodeRef

  return (
    <Draggable nodeRef={nodeRef}> 
      <motion.div
        ref={nodeRef} // âœ… Attach nodeRef
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        className="absolute w-64 h-40 bg-gray-700 rounded-lg shadow-lg flex flex-col"
      >
        <div className="bg-gray-600 p-2 flex justify-between text-white">
          <span>{appName}</span>
          <button onClick={closeApp} className="text-red-500">
            â¨‰
          </button>
        </div>
        <div className="flex-1 flex items-center justify-center text-white">
          {children}
        </div>
      </motion.div>
    </Draggable>
  );
}
/// <reference types="vite/client" />
export const apps = [
    { name: "Finder", icon: "/icons/finder-icon.png" },
    { name: "Terminal", icon: "/icons/terminal.png" },
    { name: "GitHub", icon: "/icons/github.png", link: "https://github.com/Chrisyhjiang" }
  ];
  import { create } from "zustand";

interface AppState {
  openApps: { appName: string; filePath?: string }[];
  openApp: (appName: string, options?: { filePath?: string }) => void;
  closeApp: (appName: string) => void;
}

export const useAppStore = create<AppState>((set) => ({
  openApps: [],
  openApp: (appName, options) =>
    set((state) => ({
      openApps: [...state.openApps, { appName, ...options }],
    })),
  closeApp: (appName) =>
    set((state) => ({
      openApps: state.openApps.filter((app) => app.appName !== appName),
    })),
}));
