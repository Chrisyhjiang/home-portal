
File: ./src/App.tsx

import Desktop from "./features/Desktop/components/Desktop";

export default function App() {
  return (
    <div className="relative h-screen w-screen">
      <video
        autoPlay
        loop
        muted
        playsInline
        className="absolute inset-0 w-full h-full object-cover -z-10"
      >
        <source src="/background.mp4" type="video/mp4" />
        Your browser does not support the video tag.
      </video>

      {/* Content Overlay */}
      <div className="relative">
        {/* macOS Desktop UI */}
        <Desktop />
      </div>
    </div>
  );
}

File: ./src/main.tsx

import { createRoot } from "react-dom/client";
import "./styles/index.css";
import App from "./App.tsx";

createRoot(document.getElementById("root")!).render(
  // 🚨 Remove StrictMode to avoid warnings
  <App />
);

File: ./src/features/Spotlight/components/Spotlight.tsx

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

export const Spotlight = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [search, setSearch] = useState('');

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -50 }}
          className="fixed top-20 left-1/2 -translate-x-1/2 w-96 bg-gray-800/90 backdrop-blur-sm rounded-xl p-4"
        >
          <input
            type="text"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            className="w-full bg-transparent border-none outline-none text-white"
            placeholder="Search..."
          />
          {/* Search results */}
        </motion.div>
      )}
    </AnimatePresence>
  );
}; 
File: ./src/features/PDFViewer/components/PDFViewer.tsx

interface PDFViewerProps {
  filePath?: string;
  onClose: () => void;
}

const PDFViewer: React.FC<PDFViewerProps> = ({ filePath, onClose }) => {
  if (!filePath || !filePath.endsWith(".pdf")) {
    return (
      <div className="p-4 text-white bg-red-500">No valid PDF selected.</div>
    );
  }

  const correctedPath = filePath.startsWith("/docs/")
    ? filePath
    : `/docs/${filePath.replace(/^\/?public\//, "")}`;

  return (
    <div className="w-full h-full">
      {/* PDF Viewer */}
      <iframe
        src={`${correctedPath}#zoom=175&view=FitH&toolbar=0&navpanes=0&scrollbar=0&page=1`}
        className="w-full h-full border-none"
        title="PDF Viewer"
      />
    </div>
  );
};

export default PDFViewer;

File: ./src/features/Terminal/components/Terminal.tsx

import { useState } from "react";
import { useAppStore } from "@hooks/useAppStore";

export default function Terminal() {
  const [output, setOutput] = useState<string[]>(["Welcome to Terminal"]);
  const [input, setInput] = useState("");
  const { openApp } = useAppStore();

  const commands = {
    ls: () => "Resume.pdf  Project1  Project2",
    clear: () => {
      setOutput([]);
      return "";
    },
    help: () =>
      "Available commands:\n- ls (List files)\n- show <file> (View PDF files)\n- clear (Clear terminal)\n- help (Show this help message)",
  };

  const handleCommand = (event: React.FormEvent) => {
    event.preventDefault();
    let newOutput = [...output, `$ ${input}`];

    const args = input.split(" ");
    const command = args[0];

    if (command === "show" && args[1]?.endsWith(".pdf")) {
      const filePath = `/docs/${args[1]}`;
      console.log("Opening PDF:", filePath);
      newOutput.push(`Opening ${args[1]}...`);
      openApp("PDFViewer", { filePath });
    } else if (commands[command]) {
      newOutput.push(commands[command]());
    } else {
      newOutput.push("Command not found. Type 'help' for a list of commands.");
    }

    setOutput(newOutput);
    setInput("");
  };

  return (
    <div className="p-4 bg-black text-green-400 font-mono w-full h-full overflow-auto">
      {output.map((line, index) => (
        <div key={index}>{line}</div>
      ))}
      <form onSubmit={handleCommand} className="flex">
        <span className="mr-2">$</span>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="bg-black border-none outline-none text-green-400 flex-grow"
          autoFocus
        />
      </form>
    </div>
  );
}

File: ./src/features/Desktop/components/Desktop.tsx

import { useAppStore } from "@hooks/useAppStore";
import Topbar from "@features/Topbar/components/Topbar";
import Dock from "@features/Dock/components/Dock";
import Finder from "@features/Finder/components/Finder";
import Terminal from "@features/Terminal/components/Terminal";
import Window from "@features/Window/components/Window";
import PDFViewer from "@features/PDFViewer/components/PDFViewer";
import { useRef, useEffect } from "react";
import { apps } from "@shared/constants";
import React from 'react';
import { motion, useMotionValue, animate } from 'framer-motion';
import { PanInfo } from 'framer-motion';
import AppIcon from '@shared/components/AppIcon/AppIcon';
import { Rnd } from 'react-rnd';

interface DesktopIconProps {
  app: {
    name: string;
    icon: string;
    position?: { x: number; y: number };
  };
  onOpen: () => void;
  onDragEnd: (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => void;
}

const DesktopIcon: React.FC<DesktopIconProps> = ({ app, onOpen, onDragEnd }) => {
  const { desktopIcons, updateIconPosition } = useAppStore();
  const iconState = desktopIcons.find(icon => icon.app === app.name);

  const handleDragStop = (e: any, data: { x: number; y: number }) => {
    const newPosition = { x: data.x, y: data.y };
    updateIconPosition(app.name, newPosition);
    onDragEnd(e, { point: newPosition });
  };

  return (
    <Rnd
      position={{
        x: iconState?.position.x ?? 20,
        y: iconState?.position.y ?? 20
      }}
      size={{ width: 80, height: 80 }}
      onDragStop={handleDragStop}
      enableResizing={false}
      bounds="parent"
    >
      <div 
        className="desktop-icon flex flex-col items-center gap-2 p-2 rounded hover:bg-white/10 group cursor-pointer"
        onClick={(e) => {
          e.stopPropagation();
          console.log('Icon clicked:', app.name);
          onOpen();
        }}
      >
        <div className="w-14 h-14 flex items-center justify-center rounded-full bg-gray-800 shadow-md border border-gray-300 overflow-hidden">
          <AppIcon 
            icon={app.icon}
            name={app.name}
            className="w-12 h-12 object-cover rounded-full"
          />
        </div>
        <span className="text-white text-xs px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity">
          {app.name}
        </span>
      </div>
    </Rnd>
  );
};

export default function Desktop() {
  const { 
    openApps, 
    openApp, 
    closeApp, 
    minimizeApp, 
    restoreApp, 
    desktopIcons, 
    updateIconPosition,
    initializeDesktopIcons 
  } = useAppStore();
  
  const dragRefs = useRef<Record<string, React.RefObject<HTMLDivElement>>>({});

  // Initialize desktop icons if empty
  useEffect(() => {
    if (desktopIcons.length === 0) {
      initializeDesktopIcons();
    }
  }, [desktopIcons.length, initializeDesktopIcons]);

  // ✅ Ensure refs exist for all openApps (without reinitializing on every render)
  useEffect(() => {
    openApps.forEach(({ appName }) => {
      if (!dragRefs.current[appName]) {
        dragRefs.current[appName] = { current: null };
      }
    });
  }, [openApps]);

  const handleMinimize = (appName: string) => {
    minimizeApp(appName);
  };

  const handleDockIconClick = (appName: string) => {
    const app = openApps.find(a => a.appName === appName);
    
    if (app) {
      if (app.minimized) {
        // If app is minimized, restore it
        console.log(`[${appName}] Restoring minimized app`);
        restoreApp(appName);
      }
      // If app is already open and not minimized, do nothing
    } else {
      // If app isn't open at all, open it
      console.log(`[${appName}] Opening new app`);
      const appConfig = apps.find(a => a.name === appName);
      if (appName === "PDFViewer" && appConfig?.defaultFile) {
        openApp(appName, { filePath: appConfig.defaultFile });
      } else {
        openApp(appName);
      }
    }
  };

  // Update the desktop icon click handler
  const handleDesktopIconClick = (app: { name: string; icon: string }) => {
    console.log('Desktop icon clicked:', app.name);
    const openedApp = openApps.find(a => a.appName === app.name);
    
    if (openedApp) {
      if (openedApp.minimized) {
        console.log('Restoring minimized app:', app.name);
        restoreApp(app.name);
      } else {
        console.log('App already open:', app.name);
      }
    } else {
      console.log('Opening new app:', app.name);
      // Calculate center position
      const startPosition = {
        x: window.innerWidth / 2 - 300, // Center horizontally (assuming 600px width)
        y: window.innerHeight / 2 - 200 // Center vertically (assuming 400px height)
      };
      console.log('Opening with center position:', startPosition);
      openApp(app.name, { startPosition });
    }
  };

  return (
    <div 
      className="h-screen w-screen relative flex flex-col overflow-hidden pt-12 pb-20"
      onClick={(e) => console.log('Desktop clicked')}
    >
      <Topbar />

      {/* Desktop Icons Layer */}
      <div 
        className="absolute inset-0 pt-12 z-10"
        onClick={(e) => console.log('Icons container clicked')}
      >
        <div 
          className="relative w-full h-full"
          onClick={(e) => console.log('Inner icons container clicked')}
        >
          {apps.map((app) => (
            <DesktopIcon
              key={app.name}
              app={app}
              onOpen={() => {
                console.log('onOpen called for:', app.name);
                handleDesktopIconClick(app);
              }}
              onDragEnd={(event, info) => {
                console.log('Drag ended for:', app.name);
                updateIconPosition(app.name, {
                  x: info.point.x,
                  y: info.point.y
                });
              }}
            />
          ))}
        </div>
      </div>

      {/* Windows Layer */}
      {openApps.length > 0 && (
        <div className="relative z-30">
          {openApps.map(({ appName, filePath, minimized, startPosition }, index) => {
            const initialPosition = startPosition || {
              x: window.innerWidth / 2 - 300,
              y: window.innerHeight / 2 - 200
            };

            return (
              <div
                key={appName}
                style={{ 
                  position: "absolute", 
                  zIndex: 30 + index,
                  display: minimized ? 'none' : 'block'
                }}
              >
                <Window
                  title={appName}
                  isVisible={true}
                  onClose={() => closeApp(appName)}
                  onMinimize={() => handleMinimize(appName)}
                  startPosition={initialPosition}
                >
                  {appName === "Finder" && <Finder />}
                  {appName === "Terminal" && <Terminal />}
                  {appName === "PDFViewer" && (
                    <PDFViewer
                      filePath={filePath}
                      onClose={() => closeApp(appName)}
                    />
                  )}
                </Window>
              </div>
            );
          })}
        </div>
      )}

      {/* Dock - Topmost layer */}
      <div className="z-40">
        <Dock openApp={handleDockIconClick} />
      </div>
    </div>
  );
}

File: ./src/features/Desktop/components/ContextMenu.tsx

import React from 'react';
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';

export const DesktopContextMenu = ({ children }) => {
  return (
    <ContextMenuPrimitive.Root>
      <ContextMenuPrimitive.Trigger>{children}</ContextMenuPrimitive.Trigger>
      <ContextMenuPrimitive.Content className="bg-gray-800/90 backdrop-blur-sm border border-gray-700 rounded-lg p-2 shadow-xl">
        <ContextMenuPrimitive.Item className="text-white px-2 py-1 hover:bg-blue-500 rounded cursor-pointer">
          New Folder
        </ContextMenuPrimitive.Item>
        <ContextMenuPrimitive.Item className="text-white px-2 py-1 hover:bg-blue-500 rounded cursor-pointer">
          Change Background
        </ContextMenuPrimitive.Item>
        {/* Add more menu items */}
      </ContextMenuPrimitive.Content>
    </ContextMenuPrimitive.Root>
  );
}; 
File: ./src/features/Window/components/Window.tsx

import React, { useState, useEffect } from "react";
import { Rnd } from "react-rnd";
import { motion, animate } from "framer-motion";
import { useAppStore } from "@hooks/useAppStore";
import "../styles/Window.css";

interface WindowProps {
  title: string;
  isVisible: boolean;
  onClose: () => void;
  onMinimize: () => void;
  isMaximizedAlready?: boolean;
  children: React.ReactNode;
  startPosition?: { x: number; y: number };
}

const Window: React.FC<WindowProps> = ({
  title,
  isVisible,
  onClose,
  onMinimize,
  isMaximizedAlready = false,
  children,
  startPosition = { 
    x: window.innerWidth / 2 - 300, // Default to center
    y: window.innerHeight / 2 - 200 
  }
}) => {
  console.log('Window component rendered:', {
    title,
    isVisible,
    isMaximizedAlready,
    hasChildren: !!children
  });

  const [size, setSize] = useState({ width: 600, height: 400 });
  const [position, setPosition] = useState(startPosition);
  const [isMaximized, setIsMaximized] = useState(isMaximizedAlready);
  const { openApps, setWindowPosition } = useAppStore();
  const windowClassName = `window-rnd-${title.toLowerCase().replace(/\s+/g, '-')}`;
  const [isAnimating, setIsAnimating] = useState(false);
  const [preMaximizedState, setPreMaximizedState] = useState<{
    position: { x: number; y: number };
    size: { width: number; height: number };
  } | null>(null);

  useEffect(() => {
    if (title === "PDFViewer") {
      setSize({ width: 900, height: 1100 });
    }

    const app = openApps.find(a => a.appName === title);
    if (app?.startPosition) {
      setPosition(app.startPosition);
      setIsAnimating(true);
      handleOpenAnimation(app.startPosition);
    } else if (app?.lastPosition) {
      setPosition(app.lastPosition.position);
      setSize(app.lastPosition.size);
    }
  }, [title]);

  useEffect(() => {
    if (isMaximized) {
      const lastWindowState = {
        position,
        size
      };

      // Calculate 75% of screen dimensions
      const maxWidth = window.innerWidth * 0.75;
      const maxHeight = window.innerHeight * 0.75;
      
      // Calculate position to center the window
      const centerX = (window.innerWidth - maxWidth) / 2;
      const centerY = (window.innerHeight - maxHeight) / 2;

      setSize({ width: maxWidth, height: maxHeight });
      setPosition({ x: centerX, y: centerY });

      setPreMaximizedState(lastWindowState);
    } else if (preMaximizedState) {
      setSize(preMaximizedState.size);
      setPosition(preMaximizedState.position);
    }
  }, [isMaximized]);

  const handleOpenAnimation = async (startPos: { x: number; y: number }) => {
    const targetPosition = { x: 20, y: 20 };

    try {
      const rndElement = document.querySelector(`.${windowClassName}`);
      if (!rndElement) return;

      rndElement.style.transformOrigin = 'center center';
      setPosition({ x: 0, y: 0 });

      await animate(
        rndElement,
        {
          scale: [0.1, 0.2, 0.4, 0.6, 0.8, 0.9, 1],
          x: [
            startPos.x,
            startPos.x + (targetPosition.x - startPos.x) * 0.1,
            startPos.x + (targetPosition.x - startPos.x) * 0.3,
            startPos.x + (targetPosition.x - startPos.x) * 0.5,
            startPos.x + (targetPosition.x - startPos.x) * 0.7,
            startPos.x + (targetPosition.x - startPos.x) * 0.9,
            targetPosition.x
          ],
          y: [
            startPos.y,
            startPos.y - 40,
            startPos.y - 30,
            targetPosition.y + 40,
            targetPosition.y + 20,
            targetPosition.y + 5,
            targetPosition.y
          ]
        },
        {
          duration: 0.6,
          ease: [0.34, 1.56, 0.64, 1],
          times: [0, 0.15, 0.3, 0.5, 0.7, 0.85, 1]
        }
      );

      requestAnimationFrame(() => {
        setPosition(targetPosition);
        setWindowPosition(title, {
          position: targetPosition,
          size
        });
      });
    } catch (error) {
      console.error('Animation failed:', error);
      setPosition(targetPosition);
    } finally {
      setIsAnimating(false);
    }
  };

  const handleMaximize = () => {
    setIsMaximized(!isMaximized);
  };

  const handleDrag = (e, d) => {
    const { innerWidth, innerHeight } = window;
    const threshold = 20;

    if (d.x < threshold) {
      // Snap to left half
      setSize({ width: innerWidth / 2, height: innerHeight });
      setPosition({ x: 0, y: 0 });
    } else if (d.x > innerWidth - threshold) {
      // Snap to right half
      setSize({ width: innerWidth / 2, height: innerHeight });
      setPosition({ x: innerWidth / 2, y: 0 });
    }
  };

  if (!isVisible) return null;

  return (
    <div className={windowClassName}>
      <Rnd
        size={size}
        position={position}
        onDragStop={(e, d) => {
          setPosition({ x: d.x, y: d.y });
          setWindowPosition(title, {
            position: { x: d.x, y: d.y },
            size
          });
        }}
        onResizeStop={(e, direction, ref, delta, position) => {
          const newSize = { 
            width: ref.offsetWidth, 
            height: ref.offsetHeight 
          };
          setSize(newSize);
          setPosition(position);
          setWindowPosition(title, {
            position,
            size: newSize
          });
        }}
        bounds="window"
        dragHandleClassName="drag-handle"
      >
        <div className="window-top-bar drag-handle">
          <div className="window-controls">
            <button onClick={onMinimize} className="minimize-button">_</button>
            <button onClick={handleMaximize}>
              {isMaximized ? "❐" : "[]"}
            </button>
            <button onClick={onClose}>X</button>
          </div>
          <span className="window-title">{title}</span>
        </div>
        <div className="window-content">{children}</div>
      </Rnd>
    </div>
  );
};

export default Window;

File: ./src/features/Finder/components/Finder.tsx

import { useAppStore } from "@hooks/useAppStore";
import "../styles/Finder.css"; // Ensure you have this file for styling

export default function Finder() {
  const { openApp } = useAppStore(); // ✅ Use store to open PDFViewer

  const files = [
    { name: "Resume.pdf", path: "/docs/Resume.pdf" }, // ✅ Ensure exact casing
    { name: "Project 1", path: "https://github.com/Chrisyhjiang/project1" },
    { name: "Project 2", path: "https://github.com/Chrisyhjiang/project2" },
  ];

  return (
    <div className="finder-container">
      <h2 className="finder-title">Finder</h2>
      <ul className="finder-list">
        {files.map((file) => (
          <li key={file.name} className="finder-item">
            {file.path.startsWith("http") ? (
              <a
                href={file.path}
                target="_blank"
                rel="noopener noreferrer"
                className="finder-link"
              >
                {file.name}
              </a>
            ) : (
              <button
                onClick={() => openApp("PDFViewer", { filePath: file.path })}
                className="finder-button"
              >
                {file.name}
              </button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

File: ./src/features/Topbar/components/Topbar.tsx

import { useEffect, useState } from "react";

export default function Topbar() {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="fixed top-0 left-0 w-full h-10 bg-gray-900/80 text-white flex items-center justify-between px-4 z-50 shadow-md">
      <div className="flex items-center gap-4">
        <span className="text-lg"></span>
        <span className="text-sm">Finder</span>
      </div>
      <div className="flex gap-4 text-sm">
        <span>File</span>
        <span>Edit</span>
        <span>View</span>
        <span>Go</span>
        <span>Window</span>
        <span>Help</span>
      </div>
      <div className="text-sm">
        {time.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
      </div>
    </div>
  );
}

File: ./src/features/Dock/components/Dock.tsx

import React, { useRef } from "react";
import * as Tooltip from "@radix-ui/react-tooltip";
import {
  motion,
  useMotionValue,
  useSpring,
  useTransform,
  animate,
  MotionValue,
} from "framer-motion";
import { useAppStore } from "@hooks/useAppStore";
import AppIcon from "@shared/components/AppIcon/AppIcon";
import { apps } from "@shared/constants";

const SCALE = 1.75;
const DISTANCE = 70;
const NUDGE = 20;
const SPRING = {
  mass: 0.1,
  stiffness: 170,
  damping: 12,
};

interface Props {
  openApp: (appName: string, startPosition?: { x: number; y: number }) => void;
}

export default function Dock({ openApp }: Props) {
  const mouseLeft = useMotionValue(-Infinity);
  const { openApps, minimizeApp, restoreApp } = useAppStore();

  const handleDockIconClick = (appName: string) => {
    const app = openApps.find(a => a.appName === appName);
    const iconImg = document.querySelector(`img[alt="${appName}"]`);
    const dockIcon = iconImg?.closest('.group');
    
    if (!dockIcon) {
      console.error('Could not find dock icon for:', appName);
      return;
    }

    const dockIconRect = dockIcon.getBoundingClientRect();
    const startPosition = {
      x: dockIconRect.left,
      y: dockIconRect.top
    };

    if (app) {
      if (app.minimized) {
        // If app is minimized, restore it
        restoreApp(appName);
      }
      // If app is already open and not minimized, do nothing
    } else {
      // If app isn't open at all, open it with starting position
      openApp(appName, { startPosition });
    }
  };

  return (
    <motion.div
      className="fixed bottom-6 left-1/2 -translate-x-1/2 flex gap-4 px-6 py-4 bg-gray-900/70 backdrop-blur-lg rounded-2xl shadow-lg z-50"
      onMouseMove={(e) => {
        const { left } = e.currentTarget.getBoundingClientRect();
        mouseLeft.set(e.clientX - left);
      }}
      onMouseLeave={() => mouseLeft.set(-Infinity)}
    >
      {apps.map((app) => {
        const isRunning = openApps.some((a) => a.appName === app.name);
        const isMinimized = openApps.some(
          (a) => a.appName === app.name && a.minimized
        );

        return (
          <DockItem
            key={app.name}
            app={app}
            openApp={() => handleDockIconClick(app.name)}
            mouseLeft={mouseLeft}
          />
        );
      })}
    </motion.div>
  );
}

interface DockItemProps {
  app: { 
    name: string; 
    icon: string; 
    link?: string;
    defaultFile?: string;
  };
  openApp: () => void;
  mouseLeft: MotionValue<number>;
}

function DockItem({ app, openApp, mouseLeft }: DockItemProps) {
  const ref = useRef<HTMLDivElement>(null);
  const { openApps } = useAppStore();
  const isMinimized = openApps.some(
    a => a.appName === app.name && a.minimized
  );

  const distance = useTransform(() => {
    const bounds = ref.current
      ? { x: ref.current.offsetLeft, w: ref.current.offsetWidth }
      : { x: 0, w: 0 };
    return mouseLeft.get() - bounds.x - bounds.w / 2;
  });

  const scale = useTransform(distance, [-DISTANCE, 0, DISTANCE], [1, SCALE, 1]);
  const scaleSpring = useSpring(scale, SPRING);

  const x = useTransform(() => {
    const d = distance.get();
    if (d === -Infinity) return 0;
    if (Math.abs(d) > DISTANCE) return Math.sign(d) * -1 * NUDGE;
    return (-d / DISTANCE) * NUDGE * scale.get();
  });
  const xSpring = useSpring(x, SPRING);
  const y = useMotionValue(0);

  return (
    <Tooltip.Provider>
      <Tooltip.Root>
        <Tooltip.Trigger asChild>
          <motion.div
            ref={ref}
            style={{ x: xSpring, scale: scaleSpring, y }}
            className={`group relative flex flex-col items-center ${isMinimized ? 'minimized' : ''}`}
            onClick={() => {
              animate(y, [0, -20, 0], {
                repeat: 2,
                duration: 0.7,
                ease: "easeInOut",
              });
              openApp();
            }}
          >
            <div className="w-14 h-14 flex items-center justify-center rounded-full bg-gray-800 shadow-md border border-gray-300 overflow-hidden">
              <motion.img
                src={app.icon}
                className="w-12 h-12 object-cover rounded-full"
                alt={app.name}
              />
            </div>

            {/* Label Above Icon (only visible on hover) */}
            <span className="absolute -top-8 bg-gray-900 text-white text-xs px-2 py-1 rounded-md opacity-0 group-hover:opacity-100 transition-opacity">
              {app.name}
            </span>

            {/* Add a dot indicator for minimized windows */}
            {isMinimized && (
              <div className="absolute -bottom-1 w-1 h-1 bg-white rounded-full" />
            )}
          </motion.div>
        </Tooltip.Trigger>

        <Tooltip.Portal>
          <Tooltip.Content
            sideOffset={8}
            className="bg-gray-700 px-2 py-1.5 text-sm rounded text-white border border-gray-600 shadow"
          >
            {app.name}
            <Tooltip.Arrow />
          </Tooltip.Content>
        </Tooltip.Portal>
      </Tooltip.Root>
    </Tooltip.Provider>
  );
}

File: ./src/shared/components/AppIcon/AppIcon.tsx

import { motion } from "framer-motion";

interface AppIconProps {
  name: string;
  icon: string;
  onClick?: () => void;
  link?: string;
}

export default function AppIcon({ name, icon, onClick, link }: AppIconProps) {
  return (
    <div className="icon-wrapper" onClick={onClick}>
      <motion.img src={icon} className="icon-image" alt={name} />
    </div>
  );
}

File: ./src/shared/constants.ts

export const apps = [
  { name: "Finder", icon: "/icons/finder-icon.png" },
  { name: "Terminal", icon: "/icons/terminal.png" },
  { 
    name: "PDFViewer", 
    icon: "/icons/pdf-icon.png",
    defaultFile: "/docs/Resume.pdf"
  },
  {
    name: "GitHub",
    icon: "/icons/github.png",
    link: "https://github.com/Chrisyhjiang",
  },
];

File: ./src/vite-env.d.ts

/// <reference types="vite/client" />

File: ./src/hooks/useWindowManager.ts

import { create } from 'zustand';

interface WindowState {
  activeWindow: string | null;
  windowStack: string[];
  setActiveWindow: (windowId: string) => void;
  bringToFront: (windowId: string) => void;
}

export const useWindowManager = create<WindowState>((set) => ({
  activeWindow: null,
  windowStack: [],
  setActiveWindow: (windowId) => 
    set({ activeWindow: windowId }),
  bringToFront: (windowId) =>
    set((state) => ({
      activeWindow: windowId,
      windowStack: [
        ...state.windowStack.filter(id => id !== windowId),
        windowId
      ]
    }))
})); 
File: ./src/hooks/useAppStore.ts

import { create } from "zustand";
import { apps } from "@shared/constants";

interface WindowPosition {
  position: { x: number; y: number };
  size: { width: number; height: number };
}

interface DesktopIconState {
  position: { x: number; y: number };
  app: string;
}

interface AppState {
  openApps: {
    appName: string;
    minimized: boolean;
    lastPosition?: WindowPosition;
    startPosition?: { x: number; y: number };
    filePath?: string;
  }[];
  openApp: (appName: string, options?: { filePath?: string; startPosition?: { x: number; y: number } }) => void;
  minimizeApp: (appName: string) => void;
  restoreApp: (appName: string) => void;
  closeApp: (appName: string) => void;
  setWindowPosition: (appName: string, position: WindowPosition) => void;
  completeRestore: (appName: string) => void;
  desktopIcons: DesktopIconState[];
  updateIconPosition: (appName: string, position: { x: number; y: number }) => void;
  initializeDesktopIcons: () => void;
}

export const useAppStore = create<AppState>((set, get) => ({
  openApps: [],
  desktopIcons: [],

  openApp: (appName: string, options?: { filePath?: string; startPosition?: { x: number; y: number } }) => {
    console.log(`[${appName}] Opening app with options:`, options);
    set((state) => ({
      openApps: [
        ...state.openApps,
        { 
          appName, 
          minimized: false,
          startPosition: options?.startPosition,
          ...options 
        }
      ],
    }));
  },

  minimizeApp: (appName: string) =>
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: true }
          : app
      ),
    })),

  restoreApp: (appName: string) => {
    console.log(`[${appName}] Restoring app`);
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: false }
          : app
      ),
    }));
  },

  completeRestore: (appName: string) =>
    set((state) => ({
      openApps: state.openApps.map((app) =>
        app.appName === appName
          ? { ...app, minimized: false }
          : app
      ),
    })),

  closeApp: (appName) =>
    set((state) => ({
      openApps: state.openApps.filter((app) => app.appName !== appName),
    })),

  setWindowPosition: (appName, position) => 
    set(state => ({
      openApps: state.openApps.map(app => 
        app.appName === appName 
          ? { ...app, lastPosition: position }
          : app
      )
    })),

  updateIconPosition: (appName, position) =>
    set((state) => ({
      desktopIcons: state.desktopIcons.map((icon) =>
        icon.app === appName ? { ...icon, position } : icon
      ),
    })),

  initializeDesktopIcons: () => {
    const initialIcons = apps.map((app, index) => ({
      app: app.name,
      position: {
        x: 20,
        y: 20 + (index * 100)
      }
    }));
    
    set({ desktopIcons: initialIcons });
  },
}));


Directory structure of src excluding node_modules:

./src
├── App.tsx
├── assets
│   └── react.svg
├── features
│   ├── Desktop
│   │   └── components
│   │       ├── ContextMenu.tsx
│   │       └── Desktop.tsx
│   ├── Dock
│   │   ├── components
│   │   │   └── Dock.tsx
│   │   └── styles
│   │       └── Dock.css
│   ├── Finder
│   │   ├── components
│   │   │   └── Finder.tsx
│   │   └── styles
│   │       └── Finder.css
│   ├── PDFViewer
│   │   └── components
│   │       └── PDFViewer.tsx
│   ├── Spotlight
│   │   └── components
│   │       └── Spotlight.tsx
│   ├── Terminal
│   │   └── components
│   │       └── Terminal.tsx
│   ├── Topbar
│   │   └── components
│   │       └── Topbar.tsx
│   └── Window
│       ├── components
│       │   └── Window.tsx
│       └── styles
│           └── Window.css
├── hooks
│   ├── useAppStore.ts
│   └── useWindowManager.ts
├── lib
├── main.tsx
├── shared
│   ├── components
│   │   └── AppIcon
│   │       └── AppIcon.tsx
│   └── constants.ts
├── styles
│   ├── global.css
│   └── index.css
└── vite-env.d.ts

28 directories, 22 files
